{"version":3,"file":"static/js/849.f2878dc3.chunk.js","mappings":"uNACA,GAAgB,aAAe,mCAAmC,QAAU,+B,8BCA5E,EAAsC,2CAAtC,EAAuJ,sC,kDCQjJA,EAAkBC,EAAAA,KAAaC,MAAM,CACzCC,YAAaF,EAAAA,KAAaG,SAAS,4BA0DrC,EAvDsB,SAAHC,GAAkD,IAA5CC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAQC,EAAQH,EAARG,SAAUL,EAAWE,EAAXF,YAC1CM,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MAyBXC,EAAgB,CACpBX,YAAa,IAOf,OAJKK,IACCM,EAAcX,YAAcA,IAIhCY,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,iBAAkBjB,EACxBc,cAAeA,EACfI,SAlCiB,SAACC,EAAQC,GACxBZ,GACFI,GAASS,EAAAA,EAAAA,IAAW,CAClBb,SAAUA,EACVc,cAAe,CAEbb,MAAOA,EAAMc,IAEbjB,MAAOa,EAAOhB,gBAIlBiB,EAAQI,cAERZ,GAASa,EAAAA,EAAAA,IAAU,CACnBnB,MAAOa,EAAOhB,YACdM,MAAOA,EAAMc,OAEdH,EAAQI,YAIX,EAY2BE,UACvBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAF,SAAA,EACHX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAwBJ,SAAEpB,KACzCS,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACF,UAAWC,EAChBE,GAAG,QACHC,KAAK,OACLC,KAAK,cACLC,YAAY,QACZ/B,UAAU,EACVgC,WAAS,KAEXrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,CAACC,KAAM/B,QAI7B,EClCA,EA1BqB,WACnB,IAAAgC,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAElBI,EAAc,WAClBD,GAAU,SAAAD,GAAM,OAAKA,CAAM,GAC7B,EAEA,OACEhB,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACEC,EAAAA,EAAAA,MAAA,UAAQE,UAAWC,EAAAA,aAAkBG,KAAK,SAASc,QAASF,EAAYnB,SAAA,EACtEX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,QAAYJ,UAC1BX,EAAAA,EAAAA,KAAA,OAAK,aAAW,OAAMW,UACpBX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,mBAGxBnC,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAAA,QAAYJ,SAAC,0BAE5BiB,IACC5B,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYP,EAAYnB,UAC7BX,EAAAA,EAAAA,KAACsC,EAAa,CAAC/C,MAAM,aAAaC,OAAO,YAKnD,EC7BA,EAAuC,0CAAvC,EAA8F,gCAA9F,EAA2I,gCAA3I,EAAyL,iCAAzL,EAAoO,6BAApO,EAAmR,qCAAnR,EAAwU,mCCAxU,GAAgB,KAAO,mBAAmB,UAAY,wBAAwB,gBAAkB,8BAA8B,YAAc,0BAA0B,YAAc,0BAA0B,aAAe,2BAA2B,YAAc,0BAA0B,aAAe,2BAA2B,cAAgB,4BAA4B,eAAiB,6BAA6B,UAAY,wBAAwB,eAAiB,6BAA6B,QAAU,sBAAsB,aAAe,2BAA2B,KAAO,mBAAmB,kBAAoB,gCAAgC,SAAW,wBCAzpB,EAA4B,4BAA5B,EAAmE,2BAAnE,EAA0G,4BAA1G,EAAmJ,6BAAnJ,EAAwL,wBAAxL,EAA8N,wDAA9N,EAAwS,kCAAxS,EAA4V,kCCA5V,EAA+B,sCAA/B,EAA6E,+BCuB7E,EArBwB,SAAHF,GAAsC,IAAjCiD,EAAOjD,EAAPiD,QAASC,EAAQlD,EAARkD,SAAUC,EAAMnD,EAANmD,OACzC,OACIzC,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAiBJ,SAC3B4B,EAAQG,KAAI,SAAAC,GAAA,IAAGC,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MAAK,OACxB7C,EAAAA,EAAAA,KAAA,MAAAW,UACIX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACFC,GAAG,QACHC,KAAK,QACLC,KAAK,WACLyB,MAAOA,EACPE,QAAWN,IAAaI,EACxB9B,UAAWC,EACXgC,MAAO,CAAEC,gBAAiBH,GAC1Bb,QAASS,KATRG,EAWJ,KAKrB,E,mBCtBA,G,QAAA,CAAgB,OAAS,2B,UCqDzB,EA9CiB,SAAHtD,GAA8B,IAAxB2D,EAAI3D,EAAJ2D,KAAMC,EAAU5D,EAAV4D,WAuBlBC,GAAcC,EAAAA,EAAAA,aAAW,SAAAT,EAAqBU,GAAG,IAArBT,EAAKD,EAALC,MAAOZ,EAAOW,EAAPX,QAAO,OAC9CpB,EAAAA,EAAAA,MAAA,UAAQM,KAAK,SAASJ,UAAWC,EAAAA,OAAYiB,QAASA,EAASqB,IAAKA,EAAI1C,SAAA,CACrEiC,GACD5C,EAAAA,EAAAA,KAAA,OAAAW,UACEX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,yBAEf,IAGX,OACEnC,EAAAA,EAAAA,KAACsD,IAAU,CAACxC,UAAWC,EAAAA,OACrBwC,OAAQC,EAAAA,EACRC,SAAUR,EACVS,SAAUR,EACVS,QAAS,IAAIC,KACbC,WApCoB,SAACZ,GACvB,IAAMa,EAAQ,IAAIF,KACZG,EAAW,IAAIH,KAErB,OADAG,EAASC,QAAQF,EAAMG,UAAY,GAEjChB,EAAKgB,YAAcH,EAAMG,WACzBhB,EAAKiB,aAAeJ,EAAMI,YAC1BjB,EAAKkB,gBAAkBL,EAAMK,cAEtB,mBAEPlB,EAAKgB,YAAcF,EAASE,WAC5BhB,EAAKiB,aAAeH,EAASG,YAC7BjB,EAAKkB,gBAAkBJ,EAASI,cAEzB,sBAEA,eAEX,CAiBgBC,CAAcnB,GAC1BoB,QAAS,SAACC,GAAK,OAAKA,EAAMC,OAAOC,MAAM,EACvCC,UAAW,SAACH,GAAK,OAAKA,EAAMI,gBAAgB,EAC5CC,aAAa3E,EAAAA,EAAAA,KAACmD,EAAW,KAG/B,ECtCMyB,EAAgB1F,EAAAA,KAAaC,MAAM,CACrC0F,UAAW3F,EAAAA,KACNG,SAAS,0BACTyF,IAAI,GAAI,2CACbC,YAAa7F,EAAAA,OAiHjB,EA7GiB,SAAHI,GAAkH,IAA5GC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAQwF,EAAS1F,EAAT0F,UAAWC,EAAe3F,EAAf2F,gBAAiBC,EAAY5F,EAAZ4F,aAAcC,EAAY7F,EAAZ6F,aAAcC,EAAM9F,EAAN8F,OAAQ3F,EAAQH,EAARG,SAAU4F,EAAW/F,EAAX+F,YAEnGtF,EAAgB,CAClB8E,UAAW,GACXE,YAAa,IAGjBvD,GAAgCC,EAAAA,EAAAA,UAASyD,GAAgB,WAAUxD,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5DgB,EAAQd,EAAA,GAAE4D,EAAW5D,EAAA,GAC5B6D,GAAgC9D,EAAAA,EAAAA,UAAS0D,EAAe,IAAIvB,KAAKuB,GAAgB,IAAIvB,MAAO4B,GAAA7D,EAAAA,EAAAA,GAAA4D,EAAA,GAArFE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAGtBJ,IACFrF,EAAc8E,UAAYG,EAC1BjF,EAAcgF,YAAcE,GAEhC,IAIMpF,GAAWC,EAAAA,EAAAA,MA4CjB,OACKE,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,iBAAkB0E,EACvB7E,cAAeA,EACfI,SA7Ca,SAACC,EAAQC,GAC1B,IAAMsF,EAAU,CACZnF,IAAK4E,EACLQ,OAAQnG,EACRF,MAAOa,EAAOyE,UACdE,YAAa3E,EAAO2E,YACpBvC,SAAUA,EACViD,SAAUA,EAASI,eAGjBC,EAAW,CACbtF,IAAK4E,EACLQ,OAAQnG,EACRF,MAAOa,EAAOyE,UACdE,YAAa3E,EAAO2E,YACpBvC,SAAUA,EACViD,SAAUA,EAASI,eAEnBT,GACAvF,GAASkG,EAAAA,EAAAA,IAASD,IAClBzF,EAAQI,YACR4E,MAGAxF,GAASmG,EAAAA,EAAAA,IAAQL,IACjBtF,EAAQI,YACT4E,IAGP,EAgB+B1E,UACvBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACoF,aAAa,MAAKtF,SAAA,EACpBX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAcJ,SAAEpB,KAC/BqB,EAAAA,EAAAA,MAAA,SAAOE,UAAWC,EAAWmF,QAAQ,YAAWvF,SAAA,EAC5CX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACF,UAAWC,EACdE,GAAG,QACHC,KAAK,OACLC,KAAK,YACLC,YAAY,QACZ/B,UAAU,EACVgC,WAAS,KAEbrB,EAAAA,EAAAA,KAAA,QAAMc,UAAWC,EAAeJ,UAC5BX,EAAAA,EAAAA,KAACmG,EAAAA,GAAY,CAAChF,KAAK,oBAG3BnB,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,cAAavF,UACxBX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACF,UAAWC,EACdE,GAAG,WACHC,KAAK,OACLC,KAAK,cACLC,YAAY,cACZ/B,UAAU,OAGlBuB,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAoBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAaJ,SAAC,iBAC5BX,EAAAA,EAAAA,KAACoG,EAAe,CACZ7D,QAxCI,CACpB,CAAEK,MAAO,MAAOC,MAAM,6BACtB,CAAED,MAAO,SAAUC,MAAM,gCACzB,CAAED,MAAO,OAAQC,MAAM,8BACvB,CAAED,MAAO,UAAWC,MAAM,kCAqCVL,SAAUA,EACVC,OAjFG,SAAC6B,GACtBgB,EAAYhB,EAAMC,OAAO3B,MAC3B,QAkFYhC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAoBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAaJ,SAAC,cAC5BX,EAAAA,EAAAA,KAACqG,EAAQ,CAACpD,KAAMwC,EAAUvC,WAAYwC,QAE1C1F,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,CAACC,KAAM/B,QAIrC,EChIA,EAA4B,4BAA5B,EAAuE,+BAAvE,EAAwH,kCAAxH,EAA2K,iCC+C3K,EAvCiB,SAAHF,GAA4C,IAAvCgH,EAAShH,EAATgH,UAAW7G,EAAQH,EAARG,SAAU8G,EAAWjH,EAAXiH,YAEhCC,GADc7G,EAAAA,EAAAA,IAAY8G,EAAAA,IACUC,QAAO,SAAAd,GAAM,OAAIA,EAAOpF,MAAQf,CAAQ,KAElFkH,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,SAACtC,GACC,WAAfA,EAAMuC,MAAoBP,GAAc,EAE5C,OADAQ,OAAOC,iBAAiB,UAAWH,GAC5B,WAAOE,OAAOE,oBAAoB,UAAWJ,EACtD,CACF,GAAG,CAACN,IAEJ,IAAMzG,GAAWC,EAAAA,EAAAA,MASjB,OACEE,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAcJ,UAC5BX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAiBJ,SAC7B6F,EAAsB9D,KAAI,SAAAkD,GAAM,OAC/B5F,EAAAA,EAAAA,KAAA,MAAAW,UACEC,EAAAA,EAAAA,MAAA,UAAQE,UAAWC,EAAqBiB,QAAS,kBAbtCiF,EAawDrB,EAAOpF,SAZhFX,GAASqH,EAAAA,EAAAA,IAAY,CACrB9B,OAAQmB,EAAY/F,IACpBf,SAAUwH,EACVE,gBAAiB1H,KAJD,IAACwH,CAamE,EAAE/F,KAAK,SAAQP,SAAA,CAC1FiF,EAAOrG,OACRS,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAmBJ,UACjCX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,sBAJjByD,EAAOrG,MAOX,OAKf,ECuFA,EA1Ha,SAAHD,GAA+B,IAiBnCuD,EAjBU8C,EAAOrG,EAAPqG,QAASlG,EAAQH,EAARG,SACvB+B,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1C4F,EAAS1F,EAAA,GAAE2F,EAAY3F,EAAA,GAC9B6D,GAAgC9D,EAAAA,EAAAA,WAAS,GAAM+D,GAAA7D,EAAAA,EAAAA,GAAA4D,EAAA,GAAxC+B,EAAQ9B,EAAA,GAAE+B,EAAW/B,EAAA,GAEtB1D,EAAc,WAAH,OAASuF,GAAa,SAAAG,GAAa,OAAKA,CAAa,GAAE,EAClEC,EAAa,WAAH,OAASF,GAAY,SAAAG,GAAY,OAAKA,CAAY,GAAE,EAE9D7H,GAAWC,EAAAA,EAAAA,MAMXgE,GAAQ,IAAIF,MAAOiC,cAAc8B,QAAQ,MAAO,IAAIC,MAAM,KAAKC,UAAUC,KAAK,KAC9ErC,EAAWE,EAAQF,SAASkC,QAAQ,MAAO,IAAIC,MAAM,KAAKC,UAAUC,KAAK,KAI/E,OAFiBnC,EAAQnD,UAGvB,IAAK,MACHK,EAAQ,4BACR,MACF,IAAK,SACHA,EAAQ,+BACR,MACF,IAAK,OACHA,EAAQ,6BACR,MAIF,QACEA,EAAK,gCAGT,OACEjC,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACAC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,KAAUgC,MAAO,CAAEgF,WAAW,aAAD7F,OAAeW,IAAUlC,SAAA,EAClEX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,UAAcJ,SAAEgF,EAAQpG,SACvCS,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAAA,gBAAoBJ,SAAEgF,EAAQZ,eAC5CnE,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,YAAgBJ,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,YAAgBJ,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,cAAkBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,YAAgBJ,SAAC,cAChCC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,cAAkBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,QACEc,UAAWC,EAAAA,aACXgC,MAAO,CAAEC,gBAAiBH,MAE5B7C,EAAAA,EAAAA,KAAA,KAAAW,SAAIgF,EAAQnD,kBAGhB5B,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,cAAkBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,YAAgBJ,SAAC,cAChCX,EAAAA,EAAAA,KAAA,KAAAW,SAAI8E,WAGR7E,EAAAA,EAAAA,MAAA,MAAIE,UAAWC,EAAAA,eAAmBJ,SAAA,CAE9BmD,IAAU2B,IACZzF,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,eAAmBJ,UAC9BX,EAAAA,EAAAA,KAAA,UAAQc,UAAWC,EAAAA,UAAeG,KAAK,SAAQP,UAC7CX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,KAASJ,UACvBX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,qBAM5BvB,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEX,EAAAA,EAAAA,KAAA,UACEc,UAAWC,EAAAA,UACXG,KAAK,SACLc,QAASyF,EAAW9G,UAEpBX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,aAAiBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,qBAGxBnC,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,kBAAsBJ,SACnC2G,IACCtH,EAAAA,EAAAA,KAACgI,EAAQ,CAAC1B,UAAWmB,EAAYhI,SAAWA,EAAW8G,YAAeZ,UAI5E3F,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,QAAYJ,UACzBX,EAAAA,EAAAA,KAAA,UACEc,UAAWC,EAAAA,UACXG,KAAK,SACLc,QAASF,EAAYnB,UAErBX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,aAAiBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,uBAI1BnC,EAAAA,EAAAA,KAAA,MAAAW,UACEX,EAAAA,EAAAA,KAAA,UAAQc,UAAWC,EAAAA,UAAeiB,QAxFzB,WACnBnC,GAASoI,EAAAA,EAAAA,IAAWtC,EAAQnF,KAE9B,EAqFqEU,KAAK,SAAQP,UACpEX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,aAAiBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,8BAQ/BiF,IACCpH,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYP,EAAYnB,UAC7BX,EAAAA,EAAAA,KAACkI,EAAQ,CAAC3I,MAAM,YAAYC,OAAO,OACjCwF,UAAWW,EAAQpG,MACnB0F,gBAAiBU,EAAQZ,YACzBK,OAAQO,EAAQnF,IAChB0E,aAAcS,EAAQnD,SACtB2C,aAAcQ,EAAQF,SACtBhG,SAAUkG,EAAQlG,SAAU4F,YAAavD,QAKrD,EC5GA,EAlBiB,SAAHxC,GAAsB,IAAhBG,EAAQH,EAARG,SAEV0I,GADexI,EAAAA,EAAAA,IAAYyI,EAAAA,IACA1B,QAAO,SAAA2B,GAAI,OAAIA,EAAK5I,WAAaA,CAAQ,IAC1E,OACIO,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,SAAaJ,SACvBwH,EAAYG,OAAS,IAClBtI,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAApB,SACKwH,EAAYzF,KAAI,SAAA6F,GAAI,OACjBvI,EAAAA,EAAAA,KAAA,MAAAW,UACIX,EAAAA,EAAAA,KAACwI,EAAI,CAAC7C,QAAS4C,EAAM9I,SAAUA,KAD1B8I,EAAK/H,IAET,OAM7B,EC8DA,EAxEe,SAAHlB,GAAuB,IAAjBmJ,EAAEnJ,EAAFmJ,GAAIlJ,EAAKD,EAALC,MACpBiC,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxB6D,GAA0D9D,EAAAA,EAAAA,WAAS,GAAM+D,GAAA7D,EAAAA,EAAAA,GAAA4D,EAAA,GAAlEmD,EAAqBlD,EAAA,GAAEmD,EAAwBnD,EAAA,GAEhD1D,EAAc,WAClBD,GAAU,SAAAD,GAAM,OAAKA,CAAM,GAC7B,EAEMgH,EAA4B,WAChCD,GAAyB,SAAAD,GAAqB,OAAKA,CAAqB,GAC1E,EAEM7I,GAAWC,EAAAA,EAAAA,MAMjB,OACEc,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACEC,EAAAA,EAAAA,MAAA,KAAGE,UAAWC,EAAgBJ,SAAA,CAC3BpB,GACDS,EAAAA,EAAAA,KAAA,UACEc,UAAWC,EACXiB,QAAS4G,EACT1H,KAAK,SAAQP,UAEbX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAqB8H,MAAO,GAAIC,OAAQ,GAAGnI,UACzDX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,qBAGxBnC,EAAAA,EAAAA,KAAA,UACEc,UAAWC,EACXiB,QAnBkB,WACxBnC,GAASkJ,EAAAA,EAAAA,IAAaN,GACxB,EAkBQvH,KAAK,SAAQP,UAEbX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAqB8H,MAAO,GAAIC,OAAQ,GAAGnI,UACzDX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,uBAI1BnC,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAkBJ,UAChCX,EAAAA,EAAAA,KAACgJ,EAAQ,CAACvJ,SAAUgJ,OAEtBzI,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,CAACC,KAAK,mBAAmB0H,MAAOnH,IAC7CF,IACC5B,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYP,EAAYnB,UAE7BX,EAAAA,EAAAA,KAACkI,EAAQ,CACP3I,MAAM,WACNC,OAAO,MACPC,SAAUgJ,EACVpD,YAAavD,MAKlB4G,IACC1I,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYuG,EAA0BjI,UAC3CX,EAAAA,EAAAA,KAACsC,EAAa,CACZ/C,MAAM,cACNC,OAAO,OACPC,SAAUgJ,EACVrJ,YAAaG,QAOzB,EC1DA,GAlBoB,WAClB,IAAM2J,GAAavJ,EAAAA,EAAAA,IAAY8G,EAAAA,IAE/B,OACEzG,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAApB,UACEX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAyBJ,UACvCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAeJ,SACjB,OAAVuI,QAAU,IAAVA,OAAU,EAAVA,EAAYxG,KAAI,SAAAkD,GAAM,OACrB5F,EAAAA,EAAAA,KAAA,MAAqBc,UAAWC,EAAeJ,UAC7CX,EAAAA,EAAAA,KAACmJ,EAAM,CAACV,GAAI7C,EAAOpF,IAAKjB,MAAOqG,EAAOrG,MAAOqG,OAAQA,KAD9CA,EAAOpF,IAEX,SAMjB,ECpBA,GAA4B,gCAA5B,GAAuE,+BAAvE,GAAiH,+BAAjH,GAA2J,+BAA3J,GAAqM,+BAArM,GAA+O,+BAA/O,GAAyR,+BAAzR,GAAmU,+BAAnU,GAA6W,+BAA7W,GAAuZ,+BAAvZ,GAAkc,gCAAlc,GAA8e,gCAA9e,GAA0hB,gCAA1hB,GAAskB,gCAAtkB,GAAknB,gCAAlnB,GAA8pB,gCCA9pB,GAA8B,4BAA9B,GAAuE,2BAAvE,GAAoH,gCAApH,GAAiK,2BAAjK,GAA2M,6BAA3M,GAAsP,4BAAtP,GAA0R,sBAA1R,GAA4T,0BAA5T,GAAmW,2B,WCmFnW,GA7Ee,WAEb,IAAMX,GAAWC,EAAAA,EAAAA,MAET4D,EAAW,SAAAY,GACbzE,GAASuJ,EAAAA,GAAAA,GAAU9E,EAAM+E,cAAczG,OAC3C,EAEFpB,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCgB,EAAQd,EAAA,GAAE4D,EAAW5D,EAAA,GAatB4H,EAAe,SAAAhF,GACnBgB,EAAYhB,EAAMC,OAAO3B,MAC3B,EAWA,OACEhC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,GAAgBJ,SAAC,aAChCX,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACF,cAPU,CACpBwJ,WAAY,KACZ/G,SAAU,IAK6B7B,UACnCX,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAAC6C,SAAU4F,EAAcxI,UAAWC,GAAeJ,UACtDC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAoBJ,SAAA,EAClCC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAeJ,SAAA,EAC7BX,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,GAAeJ,SAAC,iBAC9BX,EAAAA,EAAAA,KAAA,UACEkB,KAAK,SACLc,QApBQ,WACpBsD,EAAY,IACZzF,GAASuJ,EAAAA,GAAAA,GAAU,IAErB,EAiBctI,UAAWC,GAAiBJ,SAC7B,iBAMDX,EAAAA,EAAAA,KAAA,MAAAW,SA1CY,CACtB,CACEiC,MAAO,UACPC,MAAM,gCACNtB,KAAM,oBAER,CAAEqB,MAAO,MAAOC,MAAM,4BAA8BtB,KAAM,OAC1D,CAAEqB,MAAO,SAAUC,MAAM,+BAAiCtB,KAAM,UAChE,CAAEqB,MAAO,OAAQC,MAAM,6BAA+BtB,KAAM,SAmC/BmB,KAAI,SAAApD,GAAA,IAAGsD,EAAKtD,EAALsD,MAAOC,EAAKvD,EAALuD,MAAOtB,EAAIjC,EAAJiC,KAAI,OACxCX,EAAAA,EAAAA,MAAA,MAAgBE,UAAWC,GAAgBJ,SAAA,EACzCX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACJC,GAAG,QACHC,KAAK,QACLC,KAAK,WACLyB,MAAOA,EACPE,QAASN,IAAaI,EACtBG,MAAO,CAAEC,gBAAiBH,GAC1Bb,QAASsH,EACT5F,SAAWA,EACX5C,UAAWC,KACV,KACHH,EAAAA,EAAAA,MAAA,QAAME,UAAWC,GAAcJ,SAAA,CAAC,IAAEY,OAZ3BqB,EAaJ,eASvB,EClFA,IAAgB,UAAY,mCAAmC,aAAe,sCAAsC,aAAe,sCAAsC,WAAa,oCAAoC,YAAc,sCCoCxO,GA/BwB,SAAHtD,GAAmB,IAAbC,EAAKD,EAALC,MACzBiC,GAA4BC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAClBI,EAAc,WAClBD,GAAU,SAAAD,GAAM,OAAKA,CAAM,GAC7B,EAEA,OACEhB,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAAA,UAAcJ,SAAA,EAC5BX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,GAAAA,aAAiBJ,SAAEpB,KAClCqB,EAAAA,EAAAA,MAAA,UAAQE,UAAWC,GAAAA,aAAkBG,KAAK,UAAUc,QAASF,EAAYnB,SAAA,EACvEX,EAAAA,EAAAA,KAAA,OACEc,UAAWC,GAAAA,WACX,aAAW,cACX8H,MAAM,KACNC,OAAO,KAAInI,UAEXX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,mBAEtBnC,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,GAAAA,YAAgBJ,SAAC,eAEhCiB,IACC5B,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CACJW,MAAOhC,GAAAA,WACPsB,WAAYP,EACZnB,UAAUX,EAAAA,EAAAA,KAACwJ,GAAM,QAK3B,ECyBA,GArDoB,WAClB,IAAAC,GAA8B9J,EAAAA,EAAAA,IAAYC,EAAAA,IAAlCL,EAAKkK,EAALlK,MAAOgK,EAAUE,EAAVF,WAsCTG,EAAc,GAAAxH,OAAMnB,GAAa,KAAAmB,OArCT,SAAAqH,GAC5B,OAAQA,GACN,IAAK,KACH,OAAOxI,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GACT,IAAK,KACH,OAAOA,GAIb,CAE2C4I,CACzCJ,IAEF,OACE3I,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACAX,EAAAA,EAAAA,KAAC4J,GAAe,CAACrK,MAAOA,KACtBqB,EAAAA,EAAAA,MAAA,OAAKE,UAA2B4I,EAAgB/I,SAAA,EAC7CX,EAAAA,EAAAA,KAAE6J,GAAW,KACZ7J,EAAAA,EAAAA,KAAC8J,EAAY,SAIvB,C","sources":["webpack://react-homework-template/./src/components/Board/AddBtnColumn/AddBtnColumn.module.css?57c6","webpack://react-homework-template/./src/components/Forms/BoardForms/AddColumnForm/AddColumnForm.module.css?8bcc","components/Forms/BoardForms/AddColumnForm/AddColumnForm.jsx","components/Board/AddBtnColumn/AddBtnColumn.jsx","webpack://react-homework-template/./src/components/ColumnsList/ColumnsList.module.css?4558","webpack://react-homework-template/./src/components/CardList/Card/Card.module.css?9f53","webpack://react-homework-template/./src/components/Forms/BoardForms/CardForm/CardForm.module.css?1a90","webpack://react-homework-template/./src/components/PriorityOptions/PriorityOptions.module.css?75cd","components/PriorityOptions/PriorityOptions.jsx","webpack://react-homework-template/./src/components/Calendar/Calendar.module.css?a426","components/Calendar/Calendar.jsx","components/Forms/BoardForms/CardForm/CardForm.jsx","webpack://react-homework-template/./src/components/CardList/Progress/Progress.module.css?3286","components/CardList/Progress/Progress.jsx","components/CardList/Card/Card.jsx","components/CardList/CradList.jsx","components/ColumnsList/Column.jsx","components/ColumnsList/ColumnsList.jsx","webpack://react-homework-template/./src/components/ScreensPage/Screens.page.module.css?c90b","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Board/HeaderDashboard/HeaderDashboard.module.css?275b","components/Board/HeaderDashboard/HeaderDashboard.jsx","components/ScreensPage/Screens.page.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btnAddColumn\":\"AddBtnColumn_btnAddColumn__PKhFZ\",\"btnPlus\":\"AddBtnColumn_btnPlus__wZkNB\"};","// extracted by mini-css-extract-plugin\nexport default {\"addColumnModalTitle\":\"AddColumnForm_addColumnModalTitle__whRgL\",\"addColumnForm\":\"AddColumnForm_addColumnForm__PHu-J\",\"addColumnInput\":\"AddColumnForm_addColumnInput__6QVuw\"};","import { useSelector } from 'react-redux';\nimport MainAddButton from 'components/Buttons/MainAddButton/MainAddButton';\nimport css from './AddColumnForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { addColumn, editColumn } from '../../../../redux/boards/operation';\nimport { selectBoard } from '../../../../redux/boards/selectors';\n\nconst addColumnSchema = Yup.object().shape({\n  columnTitle: Yup.string().required('Please enter the title'),\n});\n\nconst AddColumnForm = ({ title, action, columnId, columnTitle }) => {\n  const board = useSelector(selectBoard); \n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    if (columnId) {\n      dispatch(editColumn({\n        columnId: columnId,\n        newColumnData: {\n        // column: columnId,\n          board: board._id,\n          // boardId: board._id,\n          title: values.columnTitle,\n        }\n      }\n      ))\n      actions.resetForm();\n    } else {\n      dispatch(addColumn({\n      title: values.columnTitle,\n      board: board._id,\n      }));  \n     actions.resetForm();   \n    }\n    \n   \n  }\n  const initialValues = {\n    columnTitle: \"\"\n  }\n\n   if (columnId) {\n        initialValues.columnTitle = columnTitle;       \n    }\n\n  return (\n    <Formik validationSchema={addColumnSchema}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}>\n      <Form>\n        <h3 className={css.addColumnModalTitle}>{title}</h3>\n        <Field className={css.addColumnInput}\n          as=\"input\"\n          type=\"text\"\n          name=\"columnTitle\"\n          placeholder=\"Title\"\n          required={true}\n          autoFocus\n        />\n        <MainAddButton text={action} />\n      </Form>     \n    </Formik>\n  );\n};\n\nexport default AddColumnForm;\n","import { useState } from 'react';\nimport sprite from 'assets/images/sprite.svg';\nimport css from './AddBtnColumn.module.css';\nimport Modal from 'components/Modal/Modal';\nimport AddColumnForm from '../../Forms/BoardForms/AddColumnForm/AddColumnForm';\n\nconst AddBtnColumn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <>\n      <button className={css.btnAddColumn} type=\"button\" onClick={toggleModal}>\n        <div className={css.btnPlus}>\n          <svg aria-label=\"plus\">\n            <use href={`${sprite}#plus-20`}></use>\n          </svg>\n        </div>\n        <p className={css.btnText}>Add another column</p>\n      </button>\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n          <AddColumnForm title=\"Add column\" action=\"Add\" />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default AddBtnColumn;\n","// extracted by mini-css-extract-plugin\nexport default {\"columnsListContainer\":\"ColumnsList_columnsListContainer__y1n-3\",\"columnList\":\"ColumnsList_columnList__Oh-td\",\"columnItem\":\"ColumnsList_columnItem__fGEt7\",\"columnTitle\":\"ColumnsList_columnTitle__JgLbv\",\"btnIcon\":\"ColumnsList_btnIcon__dIt+m\",\"columnTitleIcon\":\"ColumnsList_columnTitleIcon__cKKEZ\",\"cardContainer\":\"ColumnsList_cardContainer__c+bP9\"};","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9i1e0\",\"cardTitle\":\"Card_cardTitle__WOpNK\",\"cardDescription\":\"Card_cardDescription__asnRe\",\"cardOptions\":\"Card_cardOptions__Jpn8u\",\"optionsInfo\":\"Card_optionsInfo__Ur7lv\",\"optonWrapper\":\"Card_optonWrapper__paaQk\",\"optionTitle\":\"Card_optionTitle__Xwwk2\",\"priorityMark\":\"Card_priorityMark__P5D5u\",\"priorityLabel\":\"Card_priorityLabel__UV0uv\",\"optionsBtnList\":\"Card_optionsBtnList__MCRS8\",\"optionBtn\":\"Card_optionBtn__O+R+M\",\"deadlineNotify\":\"Card_deadlineNotify__l71UH\",\"btnItem\":\"Card_btnItem__tGlpJ\",\"optionBtnSvg\":\"Card_optionBtnSvg__gpnjf\",\"bell\":\"Card_bell__9Ck4Y\",\"progressContainer\":\"Card_progressContainer__MLD9P\",\"cardList\":\"Card_cardList__0WbY0\"};","// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"CardForm_formTitle__UxmMR\",\"formText\":\"CardForm_formText__Lrywy\",\"inputForm\":\"CardForm_inputForm__Pjbp4\",\"errorField\":\"CardForm_errorField__u4Pnb\",\"label\":\"CardForm_label__yLVGx\",\"description\":\"CardForm_description__JlASz CardForm_inputForm__Pjbp4\",\"priorityWrapper\":\"CardForm_priorityWrapper__AUS8j\",\"deadlineWrapper\":\"CardForm_deadlineWrapper__9e5ip\"};","// extracted by mini-css-extract-plugin\nexport default {\"labelWrapper\":\"PriorityOptions_labelWrapper__Byxtu\",\"label\":\"PriorityOptions_label__MK2FN\"};","import { Field } from 'formik';\nimport css from \"./PriorityOptions.module.css\"\n    \nconst PriorityOptions = ({options, priority, active }) => {\n    return (\n        <ul className={css.labelWrapper}>                        \n            {options.map(({ value, color }) => (                          \n                <li key={value} >\n                    <Field\n                        as=\"input\"\n                        type=\"radio\"\n                        name=\"priority\"\n                        value={value}\n                        checked = {priority === value}\n                        className={css.label}\n                        style={{ backgroundColor: color }}\n                        onClick={active}\n                    />\n                </li>                 \n            ))}                   \n        </ul>            \n    )\n    \n}\nexport default PriorityOptions","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Calendar_button__9bAG0\"};","import DatePicker  from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport css from \"./Calendar.module.css\"\nimport { forwardRef } from \"react\";\nimport sprite from \"../../assets/images/sprite.svg\";\nimport en from \"date-fns/locale/en-GB\";\n\n\nconst Calendar = ({ date, changeDate }) => {\n  \n    const getDateFormat = (date) => {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    if (\n      date.getDate() === today.getDate() &&\n      date.getMonth() === today.getMonth() &&\n      date.getFullYear() === today.getFullYear()\n    ) {\n      return \"'Today', MMMM dd\";\n    } else if (\n      date.getDate() === tomorrow.getDate() &&\n      date.getMonth() === tomorrow.getMonth() &&\n      date.getFullYear() === tomorrow.getFullYear()\n    ) {\n      return \"'Tomorrow', MMMM dd\";\n    } else {\n      return \"EEEE, MMMM dd\";\n    }\n  };\n    \n  const CustomInput = forwardRef(({ value, onClick }, ref) => (\n    <button type=\"button\" className={css.button} onClick={onClick} ref={ref}>\n      {value}\n      <svg>\n        <use href={`${sprite}#select-menu-16`} />\n      </svg>\n    </button>\n  ));\n \n  return (\n    <DatePicker className={css.picker}\n      locale={en}                \n      selected={date}\n      onChange={changeDate}\n      minDate={new Date()}\n      dateFormat={getDateFormat(date)}\n      onFocus={(event) => event.target.blur()}\n      onKeyDown={(event) => event.preventDefault()}\n      customInput={<CustomInput />}       \n    />\n  )\n}\n\nexport default Calendar;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport css from \"./CardForm.module.css\"; \nimport PriorityOptions from '../../../PriorityOptions/PriorityOptions';\nimport Calendar from '../../../Calendar/Calendar';\nimport MainAddButton from '../../../Buttons/MainAddButton/MainAddButton';\n\nimport { useDispatch } from \"react-redux\";\n\nimport { addTask, editTask } from '../../../../redux/boards/operation';\n\n\nconst addCardSchema = Yup.object().shape({\n    cardTitle: Yup.string()\n        .required(\"Please enter the title\")\n        .max(25, \"Must be no more than 25 characters long\"),\n    description: Yup.string(),\n});\n\n\nconst CardForm = ({ title, action, taskTitle, taskDescription, taskPriority, taskDeadline, taskId, columnId, handleClose }) => {\n      \n    const initialValues = {\n        cardTitle: \"\",\n        description: \"\", \n    }\n\n    const [priority, setPriority] = useState(taskPriority || \"Without\");\n    const [deadline, setDeadline] = useState(taskDeadline ? new Date(taskDeadline) : new Date());\n   \n\n      if (taskId) {\n        initialValues.cardTitle = taskTitle;\n        initialValues.description = taskDescription; \n    }\n    const priorityChange = (event) => {\n      setPriority(event.target.value);\n    }\n\n    const dispatch = useDispatch();\n    \n    const handleSubmit = (values, actions) => {\n        const newCard = {\n            _id: taskId,\n            column: columnId,\n            title: values.cardTitle,\n            description: values.description,\n            priority: priority,\n            deadline: deadline.toISOString(),\n        }\n\n        const editCard = {\n            _id: taskId,\n            column: columnId,\n            title: values.cardTitle,\n            description: values.description,\n            priority: priority,\n            deadline: deadline.toISOString(),\n        }\n        if (taskId) {\n            dispatch(editTask(editCard));\n            actions.resetForm(); \n            handleClose();\n            \n        } else {\n            dispatch(addTask(newCard));  \n            actions.resetForm(); \n           handleClose();\n        }\n               \n    }\n  \n\n\n    const priorityOptions = [\n        { value: 'Low', color: `var(--priority-low-color)`},\n        { value: 'Medium', color: `var(--priority-medium-color)`},\n        { value: 'High', color: `var(--priority-high-color)` },\n        { value: 'Without', color: `var(--priority-color-without)`},\n    ];\n\n  \n\n    return (\n         <Formik validationSchema={addCardSchema}\n            initialValues={initialValues}\n            onSubmit={handleSubmit}>\n            <Form autoComplete=\"off\">\n                <h4 className={css.formTitle}>{title}</h4>\n                <label className={css.label} htmlFor=\"cardTitle\">\n                    <Field className={css.inputForm}\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"cardTitle\"\n                        placeholder=\"Title\"\n                        required={true}\n                        autoFocus                       \n                    />\n                    <span className={css.errorField}>\n                        <ErrorMessage name=\"cardTitle\" />\n                    </span>                    \n                </label>\n                <label htmlFor=\"description\">\n                    <Field className={css.description}\n                        as=\"textarea\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"Description\"\n                        required={true}                        \n                    />\n                </label>           \n                <div className={css.priorityWrapper}>\n                    <p className={css.formText}>Label color</p>\n                    <PriorityOptions\n                        options={priorityOptions}\n                        priority={priority}\n                        active={priorityChange}\n                    />  \n                </div>\n                <div className={css.deadlineWrapper}>\n                    <p className={css.formText}>Deadline</p>\n                    <Calendar date={deadline} changeDate={setDeadline} />\n                </div>\n                <MainAddButton text={action}/>\n            </Form>\n        </Formik >        \n    )\n}\n\nexport default CardForm; ","// extracted by mini-css-extract-plugin\nexport default {\"popupMenu\":\"Progress_popupMenu__BWCqT\",\"progressList\":\"Progress_progressList__kvm4P\",\"progressListBtn\":\"Progress_progressListBtn__Hv5GC\",\"progressBtnSvg\":\"Progress_progressBtnSvg__15GWP\"};","import React from 'react';\nimport css from './Progress.module.css';\nimport sprite from 'assets/images/sprite.svg';\nimport { useEffect } from \"react\"; \nimport { useDispatch, useSelector } from 'react-redux';\nimport { replaceTask } from '../../../redux/boards/operation';\n\nimport { selecColumnList } from \"../../../redux/boards/selectors\";\n\nconst Progress = ({closeMenu, columnId, currentTask}) => {\n  const columnsList = useSelector(selecColumnList)\n  const columnsWithoutCurrent = columnsList.filter(column => column._id !== columnId)\n\n  useEffect(() => {\n    const onEscClick = (event) => {\n      if (event.code === \"Escape\") {closeMenu();} }\n      window.addEventListener(\"keydown\", onEscClick);\n      return () => {window.removeEventListener('keydown', onEscClick);\n    };  \n  }, [closeMenu]);\n\n  const dispatch = useDispatch()\n  const handleClick = (newColumnId) => {\n      dispatch(replaceTask({\n      taskId: currentTask._id,\n      columnId: newColumnId,\n      currentColumnId: columnId\n    }))\n  }\n  \n  return (\n    <div className={css.popupMenu}>\n      <ul className={css.progressList}>\n        {columnsWithoutCurrent.map(column =>\n          <li key={column.title}>\n            <button className={css.progressListBtn} onClick={() => handleClick(column._id)} type=\"button\">\n              {column.title}\n              <svg className={css.progressBtnSvg}>\n                <use href={`${sprite}#remove-16`}></use>\n              </svg>            \n            </button>\n          </li>\n        )}         \n      </ul>\n    </div>\n  )\n};\n\nexport default Progress;\n","import css from './Card.module.css';\nimport sprite from '../../../assets/images/sprite.svg';\nimport { useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport Modal from 'components/Modal/Modal';\nimport CardForm from 'components/Forms/BoardForms/CardForm/CardForm';\nimport Progress from '../Progress/Progress';\n// import { selectDeletetaskId } from \"../../../redux/tasks/selectors\";\nimport { deleteTask } from '../../../redux/boards/operation';\n\n\nconst Card = ({ newCard, columnId }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n \n  const toggleModal = () => setShowModal(prevShowModal => !prevShowModal);\n  const toggleMenu = () => setShowMenu(prevShowMenu => !prevShowMenu);\n \n  const dispatch = useDispatch();\n\n  const onDeleteTask = () => {\n    dispatch(deleteTask(newCard._id)); \n    \n  }\n  const today = new Date().toISOString().replace(/T.*/, '').split('-').reverse().join('/'); \n  const deadline = newCard.deadline.replace(/T.*/, '').split('-').reverse().join('/'); \n \n  const priority = newCard.priority;\n  let color;\n  switch (priority) {\n    case 'Low':\n      color = 'var(--priority-low-color)';\n      break;\n    case 'Medium':\n      color = 'var(--priority-medium-color)';\n      break;\n    case 'High':\n      color = 'var(--priority-high-color)';\n      break;\n    case \"Without\":\n      color = 'var(--priority-color-without)';\n      break;\n    default:\n      color = `var(--priority-color-without)`;\n  }\n    \n  return (\n    <>\n    <div className={css.card} style={{ borderLeft: `4px solid ${color}` }}>\n        <h4 className={css.cardTitle}>{newCard.title}</h4>\n        <p className={css.cardDescription}>{newCard.description}</p>\n        <div className={css.cardOptions}>\n          <div className={css.optionsInfo}>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Priority</h5>\n              <div className={css.priorityLabel}>\n                <span\n                  className={css.priorityMark}\n                  style={{ backgroundColor: color }}\n                ></span>\n                <p>{newCard.priority}</p>\n              </div>\n            </div>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Deadline</h5>\n              <p>{deadline}</p>\n            </div>\n          </div>\n          <ul className={css.optionsBtnList}>\n             \n            { today === deadline && (\n            <li className={css.deadlineNotify}> \n                <button className={css.optionBtn} type=\"button\">\n                  <svg className={css.bell}>\n                    <use href={`${sprite}#bell-16`}></use>\n                  </svg>\n                </button>\n             </li>   \n              )}\n             \n            <li>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleMenu}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#remove-16`}></use>\n                </svg>\n              </button>\n              <div className={css.progressContainer}>\n                {showMenu && (\n                  <Progress closeMenu={toggleMenu} columnId={ columnId } currentTask = {newCard} />\n                )}\n              </div>\n            </li>\n            <li className={css.btnItem}>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleModal}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#pencil-16`}></use>\n                </svg>\n              </button>\n            </li>\n            <li>\n              <button className={css.optionBtn} onClick={onDeleteTask} type=\"button\">\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#trash-16`}></use>\n                </svg>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {showModal && (\n        <Modal closeModal={toggleModal}>\n          <CardForm title=\"Edit card\" action=\"Edit\"\n            taskTitle={newCard.title}\n            taskDescription={newCard.description}\n            taskId={newCard._id}\n            taskPriority={newCard.priority}\n            taskDeadline={newCard.deadline}\n            columnId={newCard.columnId} handleClose={toggleModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Card;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleTasks } from '../../redux/boards/selectors';\nimport Card from '../CardList/Card/Card';\nimport css from '../CardList/Card/Card.module.css';\n\nconst CardList = ({ columnId }) => {\n    const visibleCards = useSelector(selectVisibleTasks);\n    const columnCards = visibleCards.filter(item => item.columnId === columnId)\n    return (\n        <ul className={css.cardList}>\n            {columnCards.length > 0 &&\n                <>\n                    {columnCards.map(card =>\n                        <li key={card._id}>\n                            <Card newCard={card} columnId={columnId} />\n                        </li>\n                    )}\n                </>          \n            }\n        </ul>            \n    )\n}\n\nexport default CardList;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport sprite from '../../assets/images/sprite.svg';\nimport css from '../ColumnsList/ColumnsList.module.css';\nimport CardList from '../CardList/CradList';\nimport MainAddButton from '../Buttons/MainAddButton/MainAddButton';\nimport Modal from '../Modal/Modal';\nimport CardForm from '../Forms/BoardForms/CardForm/CardForm';\nimport { deleteColumn } from '../../redux/boards/operation';\nimport AddColumnForm from '../Forms/BoardForms/AddColumnForm/AddColumnForm';\n\nconst Column = ({ id, title }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isModalColumnEditOpen, setIsModalColumnEditOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  const handleModalColumnEditOpen = () => {\n    setIsModalColumnEditOpen(isModalColumnEditOpen => !isModalColumnEditOpen);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleRemoveClick = () => {\n    dispatch(deleteColumn(id));\n  };\n\n  return (\n    <>\n      <p className={css.columnTitle}>\n        {title}\n        <button\n          className={css.btnIcon}\n          onClick={handleModalColumnEditOpen}\n          type=\"button\"\n        >\n          <svg className={css.columnTitleIcon} width={16} height={16}>\n            <use href={`${sprite}#pencil-16`}></use>\n          </svg>\n        </button>\n        <button\n          className={css.btnIcon}\n          onClick={handleRemoveClick}\n          type=\"button\"\n        >\n          <svg className={css.columnTitleIcon} width={16} height={16}>\n            <use href={`${sprite}#trash-16`}></use>\n          </svg>\n        </button>\n      </p>\n      <div className={css.cardContainer}>\n        <CardList columnId={id} />\n      </div>\n      <MainAddButton text=\"Add another card\" click={toggleModal} />\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n\n          <CardForm\n            title=\"Add card\"\n            action=\"Add\"\n            columnId={id}\n            handleClose={toggleModal}\n          />\n\n        </Modal>\n      )}\n      {isModalColumnEditOpen && (\n        <Modal closeModal={handleModalColumnEditOpen}>\n          <AddColumnForm\n            title=\"Edit column\"\n            action=\"Edit\"\n            columnId={id}\n            columnTitle={title}\n          />\n        </Modal>\n      )}\n     \n    </>\n  );\n};\n\nexport default Column;\n","import css from './ColumnsList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selecColumnList } from '../../redux/boards/selectors';\nimport Column from './Column';\n\nconst ColumnsList = () => {\n  const allColumns = useSelector(selecColumnList);\n\n  return (\n    <>\n      <div className={css.columnsListContainer}>\n        <ul className={css.columnList}>\n          {allColumns?.map(column => (\n            <li key={column._id} className={css.columnItem}>\n              <Column id={column._id} title={column.title} column={column} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ColumnsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Screens_page_container__51p2p\",\"bgImage1\":\"Screens_page_bgImage1__OydW4\",\"bgImage2\":\"Screens_page_bgImage2__fmZk6\",\"bgImage3\":\"Screens_page_bgImage3__t38vE\",\"bgImage4\":\"Screens_page_bgImage4__0wNGd\",\"bgImage5\":\"Screens_page_bgImage5__OhxDX\",\"bgImage6\":\"Screens_page_bgImage6__g7WiG\",\"bgImage7\":\"Screens_page_bgImage7__rP--d\",\"bgImage8\":\"Screens_page_bgImage8__zQy49\",\"bgImage9\":\"Screens_page_bgImage9__-53iA\",\"bgImage10\":\"Screens_page_bgImage10__Kt+5F\",\"bgImage11\":\"Screens_page_bgImage11__KiLH2\",\"bgImage12\":\"Screens_page_bgImage12__Olz6K\",\"bgImage13\":\"Screens_page_bgImage13__jh2yT\",\"bgImage14\":\"Screens_page_bgImage14__HbmEn\",\"bgImage15\":\"Screens_page_bgImage15__JIqvf\"};","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"filterContainer\":\"Filter_filterContainer__8G57N\",\"textLeabel\":\"Filter_textLeabel__QUz2b\",\"buttonLeabel\":\"Filter_buttonLeabel__JxnC3\",\"leabelGroup\":\"Filter_leabelGroup__06GpO\",\"label\":\"Filter_label__vEd1E\",\"labeltext\":\"Filter_labeltext__wgxuo\",\"filterForm\":\"Filter_filterForm__+l+6Q\"};","import { Formik, Form, Field } from 'formik';\nimport css from './Filter.module.css';\nimport { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\n\nconst Filter = () => {\n  \n  const dispatch = useDispatch()\n  \n    const onChange = event => {\n        dispatch(setFilter(event.currentTarget.value));\n    }\n    \n  const [priority, setPriority] = useState('');\n\n  const priorityOptions = [\n    {\n      value: 'Without',\n      color: `var(--priority-color-without)`,\n      text: 'Without priority',\n    },\n    { value: 'Low', color: `var(--priority-low-color)`, text: 'Low' },\n    { value: 'Medium', color: `var(--priority-medium-color)`, text: 'Medium' },\n    { value: 'High', color: `var(--priority-high-color)`, text: 'High' },\n  ];\n \n  const handleChange = event => {\n    setPriority(event.target.value);\n  };\n  const handleShowAll = () => {\n    setPriority(\"\");\n    dispatch(setFilter(\"\"));\n    \n  };\n\n  const initialValues = {\n    background: '00',\n    priority: '',\n  };\n  return (\n    <div>\n      <h2 className={css.filterTitle}>Filters</h2>\n      <Formik initialValues={initialValues}>\n        <Form onChange={handleChange} className={css.filterForm}>\n          <div className={css.filterContainer}>\n            <div className={css.filterWrap}>\n              <p className={css.textLeabel}>Label color</p>\n              <button\n                type=\"button\"\n                onClick={handleShowAll}\n                className={css.buttonLeabel}\n              >\n                Show all\n              </button>\n            </div>\n\n            {\n              <ul>\n                {priorityOptions.map(({ value, color, text }) => (\n                  <li key={value} className={css.leabelGroup}>\n                    <Field\n                      as=\"input\"\n                      type=\"radio\"\n                      name=\"priority\"\n                      value={value}\n                      checked={priority === value}\n                      style={{ backgroundColor: color }}\n                      onClick={handleChange}\n                      onChange={ onChange }\n                      className={css.label}\n                    />{' '}\n                    <span className={css.labeltext}> {text}</span>\n                  </li>\n                ))}\n              </ul>\n            }           \n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HeaderDashboard_container__CSoUF\",\"projectTitle\":\"HeaderDashboard_projectTitle__F-IyU\",\"buttonFilter\":\"HeaderDashboard_buttonFilter__Ns8y8\",\"modalStyle\":\"HeaderDashboard_modalStyle__jVe5R\",\"filterTitle\":\"HeaderDashboard_filterTitle__trtwk\"};","import Filter from 'components/Filter/Filter';\nimport { useState } from 'react';\nimport css from './HeaderDashboard.module.css';\nimport sprite from 'assets/images/sprite.svg';\nimport Modal from 'components/Modal/Modal';\n\nconst HeaderDashboard = ({ title }) => {\n  const [isOpen, setIsOpen] = useState();\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <div className={css.container}>\n      <h2 className={css.projectTitle}>{title}</h2>\n      <button className={css.buttonFilter} type=\" button\" onClick={toggleModal}>\n        <svg\n          className={css.filterIcon}\n          aria-label=\"filter icon\"\n          width=\"16\"\n          height=\"16\"\n        >\n          <use href={`${sprite}#filter-16`}></use>\n        </svg>\n        <p className={css.filterTitle}>Filters</p>\n      </button>\n      {isOpen && (\n        <Modal\n          style={css.modalStyle}\n          closeModal={toggleModal}\n          children={<Filter />}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default HeaderDashboard;\n","import AddBtnColumn from 'components/Board/AddBtnColumn/AddBtnColumn';\nimport ColumnsList from '../ColumnsList/ColumnsList';\nimport css from './Screens.page.module.css';\nimport HeaderDashboard from 'components/Board/HeaderDashboard/HeaderDashboard';\nimport { useSelector } from 'react-redux';\nimport { selectBoard } from '../../redux/boards/selectors';\n\nconst ScreensPage = () => {\n  const { title, background } = useSelector(selectBoard);\n  const getClassForBackground = background => {\n    switch (background) {\n      case '01':\n        return css.bgImage1;\n      case '02':\n        return css.bgImage2;\n      case '03':\n        return css.bgImage3;\n      case '04':\n        return css.bgImage4;\n      case '05':\n        return css.bgImage5;\n      case '06':\n        return css.bgImage6;\n      case '07':\n        return css.bgImage7;\n      case '08':\n        return css.bgImage8;\n      case '09':\n        return css.bgImage9;\n      case '10':\n        return css.bgImage10;\n      case '11':\n        return css.bgImage11;\n      case '12':\n        return css.bgImage12;\n      case '13':\n        return css.bgImage13;\n      case '14':\n        return css.bgImage14;\n      case '15':\n        return css.bgImage15;\n      default:\n        break;\n    }\n  };\n\n  const containerClass = `${css.container} ${getClassForBackground(\n    background\n  )}`;\n  return (\n    <>\n    <HeaderDashboard title={title} />\n      <div className={(css.container, containerClass)}>\n         < ColumnsList />\n          <AddBtnColumn />          \n       </div>\n    </>\n  );\n};\n\nexport default ScreensPage;\n"],"names":["addColumnSchema","Yup","shape","columnTitle","required","_ref","title","action","columnId","board","useSelector","selectBoard","dispatch","useDispatch","initialValues","_jsx","Formik","validationSchema","onSubmit","values","actions","editColumn","newColumnData","_id","resetForm","addColumn","children","_jsxs","Form","className","css","Field","as","type","name","placeholder","autoFocus","MainAddButton","text","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","toggleModal","_Fragment","onClick","href","concat","sprite","Modal","closeModal","AddColumnForm","options","priority","active","map","_ref2","value","color","checked","style","backgroundColor","date","changeDate","CustomInput","forwardRef","ref","DatePicker","locale","en","selected","onChange","minDate","Date","dateFormat","today","tomorrow","setDate","getDate","getMonth","getFullYear","getDateFormat","onFocus","event","target","blur","onKeyDown","preventDefault","customInput","addCardSchema","cardTitle","max","description","taskTitle","taskDescription","taskPriority","taskDeadline","taskId","handleClose","setPriority","_useState3","_useState4","deadline","setDeadline","newCard","column","toISOString","editCard","editTask","addTask","autoComplete","htmlFor","ErrorMessage","PriorityOptions","Calendar","closeMenu","currentTask","columnsWithoutCurrent","selecColumnList","filter","useEffect","onEscClick","code","window","addEventListener","removeEventListener","newColumnId","replaceTask","currentColumnId","showModal","setShowModal","showMenu","setShowMenu","prevShowModal","toggleMenu","prevShowMenu","replace","split","reverse","join","borderLeft","Progress","deleteTask","CardForm","columnCards","selectVisibleTasks","item","length","card","Card","id","isModalColumnEditOpen","setIsModalColumnEditOpen","handleModalColumnEditOpen","width","height","deleteColumn","CardList","click","allColumns","Column","setFilter","currentTarget","handleChange","background","Filter","_useSelector","containerClass","getClassForBackground","HeaderDashboard","ColumnsList","AddBtnColumn"],"sourceRoot":""}