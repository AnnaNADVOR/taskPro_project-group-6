{"version":3,"file":"static/js/97.933d52b5.chunk.js","mappings":"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","sources":["components/Forms/AuthForms/Schemas/Schemas.jsx","webpack://react-homework-template/./src/components/AuthNav/AuthNav.module.css?aff0","components/AuthNav/AuthNav.jsx","components/Forms/AuthForms/RegisterForm/RegisterForm.jsx","components/Forms/AuthForms/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/components/Logo/Logo.module.css?6a46","components/Logo/Logo.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst Schema = yup.object({\n  name: yup\n    .string()\n    .trim()\n    .min(2, 'Name must be at least 2 characters')\n    .max(32, 'Name must be no more than 32 characters')\n    .matches(\n      /^[a-zA-Z0-9\\s]*$/,\n      'Name can only contain letters, numbers, and spaces'\n    ),\n  email: yup\n    .string()\n    .trim()\n    .email()\n    .required('Email is required')\n    .matches(\n      /^[a-zA-Z0-9.-_]+@[a-zA-Z]+\\.[a-zA-Z]{2,3}$/,\n      'Invalid email format'\n    ),\n  password: yup\n    .string()\n    .trim()\n    .required('Password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be no more than 64 characters')\n    .test(\n      'no-spaces',\n      'Password cannot contain spaces',\n      value => !/\\s/.test(value)\n    ),\n});\n\nexport default Schema;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"AuthNav_box__a79DY\",\"form\":\"AuthNav_form__Tu5W2\",\"input\":\"AuthNav_input__dreiH\",\"inputBox\":\"AuthNav_inputBox__SDbVX\",\"wrap\":\"AuthNav_wrap__kWELm\",\"icon\":\"AuthNav_icon__tXG1f\",\"links\":\"AuthNav_links__-5Mwd\",\"link\":\"AuthNav_link__1DYPd\",\"activelink\":\"AuthNav_activelink__lTzmI\",\"errorMessage\":\"AuthNav_errorMessage__wa401\",\"wrapper\":\"AuthNav_wrapper__Ok8-0\",\"button\":\"AuthNav_button__-fh2Z\"};","import { NavLink } from 'react-router-dom';\n\nimport style from './AuthNav.module.css';\n\nconst ActiveAuthLink = () => {\n  return (\n    <div className={style.links}>\n      <NavLink\n        className={({ isActive }) =>\n          isActive ? `${style.link} ${style.activelink}` : style.link\n        }\n        to={`/auth/register`}\n      >\n        Registration\n      </NavLink>\n      <NavLink\n        className={({ isActive }) =>\n          isActive ? `${style.link} ${style.activelink}` : style.link\n        }\n        to={`/auth/login`}\n      >\n        Log In\n      </NavLink>\n    </div>\n  );\n};\n\nexport default ActiveAuthLink;\n","import { useState } from 'react';\nimport { register } from '../../../../redux/auth/operation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\n\nimport Schema from '../Schemas/Schemas';\nimport ActiveAuth from 'components/AuthNav/AuthNav';\nimport { selectIsLoadingRegister } from '../../../../redux/auth/selectors';\nimport sprite from '../../../../assets/images/sprite.svg';\n\nimport style from '../../../AuthNav/AuthNav.module.css';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n  const [showPassword, setShowPassword] = useState(false);\n  const handleTogglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n  const isLoading = useSelector(selectIsLoadingRegister);\n\n  return (\n    <div className={style.box}>\n      <ActiveAuth />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Schema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <Form className={style.form} autoComplete=\"off\">\n            <div className={style.inputBox}>\n              <div className={style.wrap}>\n                <ErrorMessage\n                  name=\"name\"\n                  render={message => (\n                    <p className={style.errorMessage}>{message}</p>\n                  )}\n                />\n                <Field\n                  className={style.input}\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Enter your name\"\n                />\n              </div>\n              <div className={style.wrap}>\n                <ErrorMessage\n                  name=\"email\"\n                  render={message => (\n                    <p className={style.errorMessage}>{message}</p>\n                  )}\n                />\n                <Field\n                  className={style.input}\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n              <div className={style.wrap}>\n                <ErrorMessage\n                  name=\"password\"\n                  render={message => (\n                    <p className={style.errorMessage}>{message}</p>\n                  )}\n                />\n                <Field\n                  className={style.input}\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Confirm a password\"\n                />\n                <div className={style.wrapper}>\n                  {showPassword ? (\n                    <svg\n                      width={18}\n                      height={18}\n                      className={style.icon}\n                      onClick={handleTogglePassword}\n                    >\n                      <use href={`${sprite}#password-eye-18`} />\n                    </svg>\n                  ) : (\n                    <svg\n                      width={18}\n                      height={18}\n                      className={style.icon}\n                      onClick={handleTogglePassword}\n                    >\n                      <use href={`${sprite}#icon-eye-off-1`} />\n                    </svg>\n                  )}\n                </div>\n              </div>\n            </div>\n            <button\n              className={style.button}\n              type=\"submit\"\n              disabled={isSubmitting || isLoading}\n            >\n              {isLoading ? 'Loading...' : 'Register Now'}{' '}\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\n\nimport Schema from '../Schemas/Schemas';\n\nimport { logIn } from '../../../../redux/auth/operation';\nimport { selectIsLoadingLogin } from '../../../../redux/auth/selectors';\nimport ActiveAuth from 'components/AuthNav/AuthNav';\nimport sprite from '../../../../assets/images/sprite.svg';\n\nimport style from '../../../AuthNav/AuthNav.module.css';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoadingLogin);\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    resetForm();\n  };\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n  const [showPassword, setShowPassword] = useState(false);\n  const handleTogglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div className={style.box}>\n      <ActiveAuth />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Schema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <Form className={style.form}>\n            <div className={style.inputBox}>\n              <div className={style.wrap}>\n                <ErrorMessage\n                  name=\"email\"\n                  render={message => (\n                    <p className={style.errorMessage}>{message}</p>\n                  )}\n                />\n                <Field\n                  className={style.input}\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n              <div className={style.wrap}>\n                <ErrorMessage\n                  name=\"password\"\n                  render={message => (\n                    <p className={style.errorMessage}>{message}</p>\n                  )}\n                />\n                <Field\n                  className={style.input}\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Confirm a password\"\n                />\n                <div className={style.wrapper}>\n                  {showPassword ? (\n                    <svg\n                      width={18}\n                      height={18}\n                      className={style.icon}\n                      onClick={handleTogglePassword}\n                    >\n                      <use href={`${sprite}#password-eye-18`} />\n                    </svg>\n                  ) : (\n                    <svg\n                      width={18}\n                      height={18}\n                      className={style.icon}\n                      onClick={handleTogglePassword}\n                    >\n                      <use href={`${sprite}#icon-eye-off-1`} />\n                    </svg>\n                  )}\n                </div>\n              </div>\n            </div>\n            <button\n              className={style.button}\n              type=\"submit\"\n              disabled={isSubmitting || isLoading}\n            >\n              {isLoading ? 'Loading...' : 'Log In Now'}\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"logo\":\"Logo_logo__vDBPO\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport style from './Logo.module.css';\n\nconst Logo = () => {\n  const linkStyles = {\n    textDecoration: 'underline',\n  };\n  return (\n    <span className={style.logo}>\n      ©\n      <Link to=\"/\" style={linkStyles}>\n        TaskPro\n      </Link>\n      2024\n    </span>\n  );\n};\nexport default Logo;\n","import { useParams } from 'react-router-dom';\n\nimport Wrapper from 'components/Forms/AuthForms/Wrapper/Wrapper';\nimport RegisterForm from 'components/Forms/AuthForms/RegisterForm/RegisterForm';\nimport LoginForm from 'components/Forms/AuthForms/LoginForm/LoginForm';\nimport Logo from 'components/Logo/Logo';\n\nconst AuthPage = () => {\n  const { id } = useParams();\n  return (\n    <Wrapper>\n      {id === 'register' ? <RegisterForm /> : <LoginForm />}\n      <Logo />\n    </Wrapper>\n  );\n};\n\nexport default AuthPage;\n"],"names":["yup","name","trim","min","max","matches","email","required","password","test","value","_jsxs","className","style","children","_jsx","NavLink","_ref","isActive","concat","to","_ref2","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleTogglePassword","isLoading","useSelector","selectIsLoadingRegister","ActiveAuth","Formik","initialValues","validationSchema","Schema","onSubmit","values","resetForm","register","isSubmitting","Form","autoComplete","ErrorMessage","render","message","Field","type","placeholder","width","height","onClick","href","sprite","disabled","selectIsLoadingLogin","logIn","Link","textDecoration","id","useParams","Wrapper","RegisterForm","LoginForm","Logo"],"sourceRoot":""}