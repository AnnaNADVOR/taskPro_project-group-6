{"version":3,"file":"static/js/719.360d3791.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Board/AddBtnColumn/AddBtnColumn.module.css?57c6","webpack://react-homework-template/./src/components/Forms/BoardForms/AddColumnForm/AddColumnForm.module.css?8bcc","redux/boards/selectors.js","redux/filter/selectors.js","components/Forms/BoardForms/AddColumnForm/AddColumnForm.jsx","components/Board/AddBtnColumn/AddBtnColumn.jsx","webpack://react-homework-template/./src/components/ColumnsList/ColumnsList.module.css?4558","webpack://react-homework-template/./src/components/CardList/Card/Card.module.css?9f53","webpack://react-homework-template/./src/components/Forms/BoardForms/CardForm/CardForm.module.css?1a90","webpack://react-homework-template/./src/components/PriorityOptions/PriorityOptions.module.css?75cd","components/PriorityOptions/PriorityOptions.jsx","webpack://react-homework-template/./src/components/Calendar/Calendar.module.css?a426","components/Calendar/Calendar.jsx","components/Forms/BoardForms/CardForm/CardForm.jsx","webpack://react-homework-template/./src/components/CardList/Progress/Progress.module.css?3286","components/CardList/Progress/Progress.jsx","components/CardList/Card/Card.jsx","components/CardList/CradList.jsx","components/ColumnsList/Column.jsx","components/ColumnsList/ColumnsList.jsx","webpack://react-homework-template/./src/components/ScreensPage/Screens.page.module.css?c90b","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Board/HeaderDashboard/HeaderDashboard.module.css?275b","components/Board/HeaderDashboard/HeaderDashboard.jsx","components/ScreensPage/Screens.page.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btnAddColumn\":\"AddBtnColumn_btnAddColumn__PKhFZ\",\"btnPlus\":\"AddBtnColumn_btnPlus__wZkNB\"};","// extracted by mini-css-extract-plugin\nexport default {\"addColumnModalTitle\":\"AddColumnForm_addColumnModalTitle__whRgL\",\"addColumnForm\":\"AddColumnForm_addColumnForm__PHu-J\",\"addColumnInput\":\"AddColumnForm_addColumnInput__6QVuw\"};","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"../filter/selectors\";\n\nexport const selectBoards = state => state.boards.boardList;\nexport const selectBoard = state => state.boards.board; \nexport const selecColumnList = state => state.boards.board.columns;\n\nexport const selectTasks = createSelector([selecColumnList], (columns) => {\n    return columns.reduce((prev, column) => {\n        return prev.concat(column.tasks.map(task => {\n            return {...task, columnId: column._id};\n        }))\n    }, [])\n})\n\nexport const selectVisibleTasks = createSelector([selectTasks, selectFilter], (tasks, filter) => {\n    return tasks.filter(task => task.priority.includes(filter));\n})\n","export const selectFilter = state => state.filter.priority; ","import { useSelector } from 'react-redux';\nimport MainAddButton from 'components/Buttons/MainAddButton/MainAddButton';\nimport css from './AddColumnForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { addColumn, editColumn } from '../../../../redux/boards/operation';\nimport { selectBoard } from '../../../../redux/boards/selectors';\n\nconst addColumnSchema = Yup.object().shape({\n  columnTitle: Yup.string().required('Please enter the title'),\n});\n\nconst AddColumnForm = ({ title, action, columnId, columnTitle }) => {\n  console.log(\"columnId\",columnId)\n  const board = useSelector(selectBoard); \n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    if (columnId) {\n      dispatch(editColumn({\n        columnId: columnId,\n        newColumnData: {\n        // column: columnId,\n          board: board._id,\n          // boardId: board._id,\n          title: values.columnTitle,\n        }\n      }\n      ))\n      actions.resetForm();\n    } else {\n      dispatch(addColumn({\n      title: values.columnTitle,\n      board: board._id,\n      }));  \n     actions.resetForm();   \n    }\n    \n   \n  }\n  const initialValues = {\n    columnTitle: \"\"\n  }\n\n   if (columnId) {\n        initialValues.columnTitle = columnTitle;       \n    }\n\n  return (\n    <Formik validationSchema={addColumnSchema}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}>\n      <Form>\n        <h3 className={css.addColumnModalTitle}>{title}</h3>\n        <Field className={css.addColumnInput}\n          as=\"input\"\n          type=\"text\"\n          name=\"columnTitle\"\n          placeholder=\"Title\"\n          required={true}\n          autoFocus\n        />\n        <MainAddButton text={action} />\n      </Form>     \n    </Formik>\n  );\n};\n\nexport default AddColumnForm;\n","import { useState } from 'react';\nimport sprite from 'assets/images/sprite.svg';\nimport css from './AddBtnColumn.module.css';\nimport Modal from 'components/Modal/Modal';\nimport AddColumnForm from '../../Forms/BoardForms/AddColumnForm/AddColumnForm';\n\nconst AddBtnColumn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <>\n      <button className={css.btnAddColumn} type=\"button\" onClick={toggleModal}>\n        <div className={css.btnPlus}>\n          <svg aria-label=\"plus\">\n            <use href={`${sprite}#plus-20`}></use>\n          </svg>\n        </div>\n        <p className={css.btnText}>Add another column</p>\n      </button>\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n          <AddColumnForm title=\"Add column\" action=\"Add\" />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default AddBtnColumn;\n","// extracted by mini-css-extract-plugin\nexport default {\"columnsListContainer\":\"ColumnsList_columnsListContainer__y1n-3\",\"columnList\":\"ColumnsList_columnList__Oh-td\",\"columnItem\":\"ColumnsList_columnItem__fGEt7\",\"columnTitle\":\"ColumnsList_columnTitle__JgLbv\",\"btnIcon\":\"ColumnsList_btnIcon__dIt+m\",\"columnTitleIcon\":\"ColumnsList_columnTitleIcon__cKKEZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9i1e0\",\"cardTitle\":\"Card_cardTitle__WOpNK\",\"cardDescription\":\"Card_cardDescription__asnRe\",\"cardOptions\":\"Card_cardOptions__Jpn8u\",\"optionsInfo\":\"Card_optionsInfo__Ur7lv\",\"optonWrapper\":\"Card_optonWrapper__paaQk\",\"optionTitle\":\"Card_optionTitle__Xwwk2\",\"priorityMark\":\"Card_priorityMark__P5D5u\",\"priorityLabel\":\"Card_priorityLabel__UV0uv\",\"optionsBtnList\":\"Card_optionsBtnList__MCRS8\",\"optionBtn\":\"Card_optionBtn__O+R+M\",\"deadlineNotify\":\"Card_deadlineNotify__l71UH\",\"btnItem\":\"Card_btnItem__tGlpJ\",\"optionBtnSvg\":\"Card_optionBtnSvg__gpnjf\",\"bell\":\"Card_bell__9Ck4Y\",\"progressContainer\":\"Card_progressContainer__MLD9P\"};","// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"CardForm_formTitle__UxmMR\",\"formText\":\"CardForm_formText__Lrywy\",\"inputForm\":\"CardForm_inputForm__Pjbp4\",\"errorField\":\"CardForm_errorField__u4Pnb\",\"label\":\"CardForm_label__yLVGx\",\"description\":\"CardForm_description__JlASz CardForm_inputForm__Pjbp4\",\"priorityWrapper\":\"CardForm_priorityWrapper__AUS8j\",\"deadlineWrapper\":\"CardForm_deadlineWrapper__9e5ip\"};","// extracted by mini-css-extract-plugin\nexport default {\"labelWrapper\":\"PriorityOptions_labelWrapper__Byxtu\",\"label\":\"PriorityOptions_label__MK2FN\"};","import { Field } from 'formik';\nimport css from \"./PriorityOptions.module.css\"\n    \nconst PriorityOptions = ({options, priority, active }) => {\n    return (\n        <ul className={css.labelWrapper}>                        \n            {options.map(({ value, color }) => (                          \n                <li key={value} >\n                    <Field\n                        as=\"input\"\n                        type=\"radio\"\n                        name=\"priority\"\n                        value={value}\n                        checked = {priority === value}\n                        className={css.label}\n                        style={{ backgroundColor: color }}\n                        onClick={active}\n                    />\n                </li>                 \n            ))}                   \n        </ul>            \n    )\n    \n}\nexport default PriorityOptions","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Calendar_button__9bAG0\"};","import DatePicker  from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport css from \"./Calendar.module.css\"\nimport { forwardRef } from \"react\";\nimport sprite from \"../../assets/images/sprite.svg\";\nimport en from \"date-fns/locale/en-GB\";\n\n\nconst Calendar = ({ date, changeDate }) => {\n  \n    const getDateFormat = (date) => {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    if (\n      date.getDate() === today.getDate() &&\n      date.getMonth() === today.getMonth() &&\n      date.getFullYear() === today.getFullYear()\n    ) {\n      return \"'Today', MMMM dd\";\n    } else if (\n      date.getDate() === tomorrow.getDate() &&\n      date.getMonth() === tomorrow.getMonth() &&\n      date.getFullYear() === tomorrow.getFullYear()\n    ) {\n      return \"'Tomorrow', MMMM dd\";\n    } else {\n      return \"EEEE, MMMM dd\";\n    }\n  };\n    \n  const CustomInput = forwardRef(({ value, onClick }, ref) => (\n    <button type=\"button\" className={css.button} onClick={onClick} ref={ref}>\n      {value}\n      <svg>\n        <use href={`${sprite}#select-menu-16`} />\n      </svg>\n    </button>\n  ));\n \n  return (\n    <DatePicker className={css.picker}\n      locale={en}                \n      selected={date}\n      onChange={changeDate}\n      minDate={new Date()}\n      dateFormat={getDateFormat(date)}\n      onFocus={(event) => event.target.blur()}\n      onKeyDown={(event) => event.preventDefault()}\n      customInput={<CustomInput />}       \n    />\n  )\n}\n\nexport default Calendar;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport css from \"./CardForm.module.css\"; \nimport PriorityOptions from '../../../PriorityOptions/PriorityOptions';\nimport Calendar from '../../../Calendar/Calendar';\nimport MainAddButton from '../../../Buttons/MainAddButton/MainAddButton';\n\nimport { useDispatch } from \"react-redux\";\n\nimport { addTask, editTask } from '../../../../redux/boards/operation';\n\n\nconst addCardSchema = Yup.object().shape({\n    cardTitle: Yup.string()\n        .required(\"Please enter the title\")\n        .max(25, \"Must be no more than 25 characters long\"),\n    description: Yup.string(),\n});\n\n\nconst CardForm = ({ title, action, taskTitle, taskDescription, taskPriority, taskDeadline, taskId, columnId }) => {\n   \n    const initialValues = {\n        cardTitle: \"\",\n        description: \"\", \n    }\n\n    const [priority, setPriority] = useState(taskPriority || \"Without\");\n    const [deadline, setDeadline] = useState(taskDeadline ? new Date(taskDeadline) : new Date());\n\n      if (taskId) {\n        initialValues.cardTitle = taskTitle;\n        initialValues.description = taskDescription; \n    }\n    const priorityChange = (event) => {\n        setPriority(event.target.value);\n    }\n\n    const dispatch = useDispatch();\n    \n    const handleSubmit = (values, actions) => {\n        const newCard = {\n            _id: taskId,\n            column: columnId,\n            title: values.cardTitle,\n            description: values.description,\n            priority: priority,\n            deadline: deadline.toISOString(),\n        }\n\n        const editCard = {\n            _id: taskId,\n            column: columnId,\n            title: values.cardTitle,\n            description: values.description,\n            priority: priority,\n            deadline: deadline.toISOString(),\n        }\n        if (taskId) {\n            dispatch(editTask(editCard));\n        } else {\n          dispatch(addTask(newCard));  \n        }\n        actions.resetForm();         \n    }\n  \n\n\n    const priorityOptions = [\n        { value: 'Low', color: `var(--priority-low-color)`},\n        { value: 'Medium', color: `var(--priority-medium-color)`},\n        { value: 'High', color: `var(--priority-high-color)` },\n        { value: 'Without', color: `var(--priority-color-without)`},\n    ];\n\n    return (\n        <Formik validationSchema={addCardSchema}\n            initialValues={initialValues}\n            onSubmit={handleSubmit}>\n            <Form autoComplete=\"off\">\n                <h4 className={css.formTitle}>{title}</h4>\n                <label className={css.label} htmlFor=\"cardTitle\">\n                    <Field className={css.inputForm}\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"cardTitle\"\n                        placeholder=\"Title\"\n                        required={true}\n                        autoFocus                       \n                    />\n                    <span className={css.errorField}>\n                        <ErrorMessage name=\"cardTitle\" />\n                    </span>                    \n                </label>\n                <label htmlFor=\"description\">\n                    <Field className={css.description}\n                        as=\"textarea\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"Description\"\n                        required={true}                        \n                    />\n                </label>           \n                <div className={css.priorityWrapper}>\n                    <p className={css.formText}>Label color</p>\n                    <PriorityOptions\n                        options={priorityOptions}\n                        priority={priority}\n                        active={priorityChange}\n                    />  \n                </div>\n                <div className={css.deadlineWrapper}>\n                    <p className={css.formText}>Deadline</p>\n                    <Calendar date={deadline} changeDate={setDeadline} />\n                </div>\n                <MainAddButton text={action}/>\n            </Form>\n        </Formik>\n    )\n}\n\nexport default CardForm; ","// extracted by mini-css-extract-plugin\nexport default {\"popupMenu\":\"Progress_popupMenu__BWCqT\",\"progressList\":\"Progress_progressList__kvm4P\",\"progressListBtn\":\"Progress_progressListBtn__Hv5GC\",\"progressBtnSvg\":\"Progress_progressBtnSvg__15GWP\"};","import React from 'react';\nimport css from './Progress.module.css';\nimport sprite from 'assets/images/sprite.svg';\nimport { useEffect } from \"react\"; \n// import { selectAllColumns } from \"../../../redux/columns/selectors\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { replaceTask } from '../../../redux/boards/operation';\n\nimport { selecColumnList } from \"../../../redux/boards/selectors\";\n\nconst Progress = ({closeMenu, columnId, currentTask}) => {\n  const columnsList = useSelector(selecColumnList)\n  // const columnList = [\n  //   { id: \"27397520852ogegldknvdvdnlk\", title: \"To to\" },\n  //   { id: \"327530janalal\", title: \"Done\" },\n  //   {id: \"gjfjfkfelkfelkfwekwfelk1\", title: \"Cuttent\"}\n  // ]\n\n  const columnsWithoutCurrent = columnsList.filter(column => column._id !== columnId)\n\n  useEffect(() => {\n    const onEscClick = (event) => {\n      if (event.code === \"Escape\") {\n        closeMenu();\n      }\n    }\n\n    window.addEventListener(\"keydown\", onEscClick);\n    return () => {\n      window.removeEventListener('keydown', onEscClick);\n    };  \n  }, [closeMenu]);\n const dispatch = useDispatch()\n  const handleClick = (newColumnId) => {\n    console.log(\"handleClick\", currentTask._id, columnId)\n    dispatch(replaceTask({\n      taskId: currentTask._id,\n      columnId: newColumnId,\n      currentColumnId: columnId\n    }))\n// dispatch(replaceTask(currentTask._id, columnId))\n  }\n  \n  return (\n    <div className={css.popupMenu}>\n      <ul className={css.progressList}>\n        {columnsWithoutCurrent.map(column => <li key={column.title}>\n          <button className={css.progressListBtn} onClick={() => handleClick(column._id)} type=\"button\">\n            {column.title}\n            <svg className={css.progressBtnSvg}>\n                <use href={`${sprite}#remove-16`}></use>\n            </svg>            \n          </button>\n        </li>)}         \n      </ul>\n    </div>\n  )\n};\n\nexport default Progress;\n","import css from './Card.module.css';\nimport sprite from '../../../assets/images/sprite.svg';\nimport { useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport Modal from 'components/Modal/Modal';\nimport CardForm from 'components/Forms/BoardForms/CardForm/CardForm';\nimport Progress from '../Progress/Progress';\n// import { selectDeletetaskId } from \"../../../redux/tasks/selectors\";\nimport { deleteTask } from '../../../redux/boards/operation';\n\n\nconst Card = ({ newCard, columnId }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n  \n  const toggleModal = () => setShowModal(prevShowModal => !prevShowModal);\n  const toggleMenu = () => setShowMenu(prevShowMenu => !prevShowMenu);\n  // useEffect(() => {\n  //   const handleClickOutside = () => {\n  //     setShowMenu(false);\n  //   };\n  //   window.addEventListener('mousedown', handleClickOutside)\n  // }, []);\n\n  const dispatch = useDispatch();\n\n  const onDeleteTask = () => {\n    dispatch(deleteTask(newCard._id)); \n       // dispatch(deleteCardOnBoard(newCard._id)); \n  }\n\n  \n  const deadline = newCard.deadline.replace(/T.*/, '').split('-').reverse().join('/'); \n  const priority = newCard.priority;\n  let color;\n  switch (priority) {\n    case 'Low':\n      color = 'var(--priority-low-color)';\n      break;\n    case 'Medium':\n      color = 'var(--priority-medium-color)';\n      break;\n    case 'High':\n      color = 'var(--priority-high-color)';\n      break;\n    case \"Without\":\n      color = 'var(--priority-color-without)';\n      break;\n    default:\n      color = `var(--priority-color-without)`;\n  }\n    \n  return (\n    <>\n    <div className={css.card} style={{ borderLeft: `4px solid ${color}` }}>\n        <h4 className={css.cardTitle}>{newCard.title}</h4>\n        <p className={css.cardDescription}>{newCard.description}</p>\n        <div className={css.cardOptions}>\n          <div className={css.optionsInfo}>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Priority</h5>\n              <div className={css.priorityLabel}>\n                <span\n                  className={css.priorityMark}\n                  style={{ backgroundColor: color }}\n                ></span>\n                <p>{newCard.priority}</p>\n              </div>\n            </div>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Deadline</h5>\n              <p>{deadline}</p>\n            </div>\n          </div>\n          <ul className={css.optionsBtnList}>\n            <li className={css.deadlineNotify}>\n              <button className={css.optionBtn} type=\"button\">\n                <svg className={css.bell}>\n                  <use href={`${sprite}#bell-16`}></use>\n                </svg>\n              </button>\n            </li>\n            <li>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleMenu}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#remove-16`}></use>\n                </svg>\n              </button>\n              <div className={css.progressContainer}>\n                {showMenu && (\n                  <Progress closeMenu={toggleMenu} columnId={ columnId } currentTask = {newCard} />\n                )}\n              </div>\n            </li>\n            <li className={css.btnItem}>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleModal}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#pencil-16`}></use>\n                </svg>\n              </button>\n            </li>\n            <li>\n              <button className={css.optionBtn} onClick={onDeleteTask} type=\"button\">\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#trash-16`}></use>\n                </svg>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {showModal && (\n        <Modal closeModal={toggleModal}>\n          <CardForm title=\"Edit card\" action=\"Edit\"\n            taskTitle={newCard.title}\n            taskDescription={newCard.description}\n            taskId={newCard._id}\n            taskPriority={newCard.priority}\n            taskDeadline={newCard.deadline}\n            columnId={newCard.columnId} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Card;\n","import { useSelector } from \"react-redux\";\nimport { selectVisibleTasks } from \"../../redux/boards/selectors\";\nimport Card from \"../CardList/Card/Card\";\n\nconst CardList = ({columnId}) => {\n    const visibleCards = useSelector(selectVisibleTasks);\n\n    const columnCards = visibleCards.filter(item => item.columnId === columnId)\n   \n    return (\n        <ul>\n            {columnCards.length > 0 &&\n           <>\n                {columnCards.map(card =>\n                    <li key={card._id}>\n                        <Card newCard={card} columnId={columnId} />\n                    </li>\n                    )}\n            </>\n          \n            }\n        </ul>\n            \n    )\n}\n\nexport default CardList; \n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport sprite from '../../assets/images/sprite.svg';\nimport css from '../ColumnsList/ColumnsList.module.css';\nimport CardList from '../CardList/CradList';\nimport MainAddButton from '../Buttons/MainAddButton/MainAddButton';\nimport Modal from '../Modal/Modal';\nimport CardForm from '../Forms/BoardForms/CardForm/CardForm';\nimport { deleteColumn } from '../../redux/boards/operation';\nimport AddColumnForm from '../Forms/BoardForms/AddColumnForm/AddColumnForm';\n\nconst Column = ({ id, title }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isModalColumnEditOpen, setIsModalColumnEditOpen] = useState(false);\n\n    const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n  const handleModalColumnEditOpen = () => {\n    setIsModalColumnEditOpen(isModalColumnEditOpen => !isModalColumnEditOpen);\n  };\n\n  const dispatch = useDispatch()\n\n  const handleRemoveClick = () => {\n    dispatch(deleteColumn(id));\n\n  }\n \n    return (\n         <>\n              <p className={css.columnTitle}>{title}\n                <button className={css.btnIcon} onClick={handleModalColumnEditOpen} type=\"button\">\n                  <svg className={css.columnTitleIcon} width={16} height={16}>\n                    <use href={`${sprite}#pencil-16`}></use>\n                  </svg>\n              </button>\n              <button className={css.btnIcon} onClick={handleRemoveClick} type=\"button\"> \n                  <svg className={css.columnTitleIcon} width={16} height={16}>\n                    <use href={`${sprite}#trash-16`}></use>\n                  </svg>\n                </button>\n                  </p>\n                 <div>\n               <CardList columnId={id}/>\n              </div>\n              <MainAddButton text=\"Add another card\" click={toggleModal} />   \n          {isOpen && (\n        \n        <Modal closeModal={toggleModal}>\n          <CardForm title=\"Add card\" action=\"Add\" columnId={id} />\n        </Modal>\n        )}\n              {isModalColumnEditOpen && (\n        \n        <Modal closeModal={handleModalColumnEditOpen}>\n          <AddColumnForm title=\"Edit column\" action=\"Edit\" columnId={id} columnTitle={title} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Column;\n","import css from './ColumnsList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selecColumnList } from '../../redux/boards/selectors';\nimport Column from './Column';\n\nconst ColumnsList = () => {\n  const allColumns = useSelector(selecColumnList);\n\n  return (\n    <>\n      <div className={css.columnsListContainer}>\n\n        <ul className={css.columnList}>\n          {allColumns?.map(column => (\n            <li key={column._id}>\n              <Column id={column._id} title={column.title} column={column} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ColumnsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Screens_page_container__51p2p\"};","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"filterContainer\":\"Filter_filterContainer__8G57N\",\"textLeabel\":\"Filter_textLeabel__QUz2b\",\"buttonLeabel\":\"Filter_buttonLeabel__JxnC3\",\"leabelGroup\":\"Filter_leabelGroup__06GpO\",\"label\":\"Filter_label__vEd1E\",\"labeltext\":\"Filter_labeltext__wgxuo\"};","import { Formik, Form, Field } from 'formik';\nimport css from './Filter.module.css';\nimport { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\n\nconst Filter = () => {\n  \n  const dispatch = useDispatch()\n  \n    const onChange = event => {\n        dispatch(setFilter(event.currentTarget.value));\n    }\n    \n  const [priority, setPriority] = useState('');\n\n  const priorityOptions = [\n    {\n      value: 'Without',\n      color: `var(--priority-color-without)`,\n      text: 'Without priority',\n    },\n    { value: 'Low', color: `var(--priority-low-color)`, text: 'Low' },\n    { value: 'Medium', color: `var(--priority-medium-color)`, text: 'Medium' },\n    { value: 'High', color: `var(--priority-high-color)`, text: 'High' },\n  ];\n \n  const handleChange = event => {\n    setPriority(event.target.value);\n  };\n  const handleShowAll = () => {\n    setPriority(\"\");\n    dispatch(setFilter(\"\"));\n    \n  };\n\n  const initialValues = {\n    background: '00',\n    priority: '',\n  };\n  return (\n    <div>\n      <h2 className={css.filterTitle}>Filters</h2>\n      <Formik initialValues={initialValues}>\n        <Form onChange={handleChange}>\n          <div className={css.filterContainer}>\n            <div className={css.filterWrap}>\n              <p className={css.textLeabel}>Label color</p>\n              <button\n                type=\"button\"\n                onClick={handleShowAll}\n                className={css.buttonLeabel}\n              >\n                Show all\n              </button>\n            </div>\n\n            {\n              <ul>\n                {priorityOptions.map(({ value, color, text }) => (\n                  <li key={value} className={css.leabelGroup}>\n                    <Field\n                      as=\"input\"\n                      type=\"radio\"\n                      name=\"priority\"\n                      value={value}\n                      checked={priority === value}\n                      style={{ backgroundColor: color }}\n                      onClick={handleChange}\n                      onChange={ onChange }\n                      className={css.label}\n                    />{' '}\n                    <span className={css.labeltext}> {text}</span>\n                  </li>\n                ))}\n              </ul>\n            }           \n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HeaderDashboard_container__CSoUF\",\"projectTitle\":\"HeaderDashboard_projectTitle__F-IyU\",\"buttonFilter\":\"HeaderDashboard_buttonFilter__Ns8y8\",\"modalStyle\":\"HeaderDashboard_modalStyle__jVe5R\",\"filterTitle\":\"HeaderDashboard_filterTitle__trtwk\"};","import Filter from 'components/Filter/Filter';\nimport { useState } from 'react';\nimport css from './HeaderDashboard.module.css';\nimport sprite from 'assets/images/sprite.svg';\nimport Modal from 'components/Modal/Modal';\n\nconst HeaderDashboard = () => {\n  const [isOpen, setIsOpen] = useState();\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <div className={css.container}>\n      <h2 className={css.projectTitle}>Name of project</h2>\n      <button className={css.buttonFilter} type=\" button\" onClick={toggleModal}>\n        <svg\n          className={css.filterIcon}\n          aria-label=\"filter icon\"\n          width=\"16\"\n          height=\"16\"\n        >\n          <use href={`${sprite}#filter-16`}></use>\n        </svg>\n        <p className={css.filterTitle}>Filters</p>\n      </button>\n      {isOpen && (\n        <Modal\n          style={css.modalStyle}\n          closeModal={toggleModal}\n          children={<Filter />}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default HeaderDashboard;\n","import AddBtnColumn from 'components/Board/AddBtnColumn/AddBtnColumn';\nimport ColumnsList from '../ColumnsList/ColumnsList';\nimport css from './Screens.page.module.css';\nimport HeaderDashboard from 'components/Board/HeaderDashboard/HeaderDashboard';\n\nconst ScreensPage = () => {\n  return (\n    <>\n      <HeaderDashboard />\n      <div className={css.container}>\n        {/* {allColumns ? ( */}\n          <>\n          < ColumnsList />\n          <AddBtnColumn /> \n          </>\n\n        {/* ) : (\n          <></>\n        )\n        } */}\n        \n      </div>\n    </>\n  );\n};\n\nexport default ScreensPage;\n"],"names":["selectBoard","state","boards","board","selecColumnList","columns","selectTasks","createSelector","reduce","prev","column","concat","tasks","map","task","_objectSpread","columnId","_id","selectVisibleTasks","filter","priority","includes","addColumnSchema","Yup","shape","columnTitle","required","_ref","title","action","console","log","useSelector","dispatch","useDispatch","initialValues","_jsx","Formik","validationSchema","onSubmit","values","actions","editColumn","newColumnData","resetForm","addColumn","children","_jsxs","Form","className","css","Field","as","type","name","placeholder","autoFocus","MainAddButton","text","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","toggleModal","_Fragment","onClick","href","sprite","Modal","closeModal","AddColumnForm","options","active","_ref2","value","color","checked","style","backgroundColor","date","changeDate","CustomInput","forwardRef","ref","DatePicker","locale","en","selected","onChange","minDate","Date","dateFormat","today","tomorrow","setDate","getDate","getMonth","getFullYear","getDateFormat","onFocus","event","target","blur","onKeyDown","preventDefault","customInput","addCardSchema","cardTitle","max","description","taskTitle","taskDescription","taskPriority","taskDeadline","taskId","setPriority","_useState3","_useState4","deadline","setDeadline","newCard","toISOString","editCard","editTask","addTask","autoComplete","htmlFor","ErrorMessage","PriorityOptions","Calendar","closeMenu","currentTask","columnsWithoutCurrent","useEffect","onEscClick","code","window","addEventListener","removeEventListener","newColumnId","replaceTask","currentColumnId","showModal","setShowModal","showMenu","setShowMenu","prevShowModal","toggleMenu","prevShowMenu","replace","split","reverse","join","borderLeft","Progress","deleteTask","CardForm","columnCards","item","length","card","Card","id","isModalColumnEditOpen","setIsModalColumnEditOpen","handleModalColumnEditOpen","width","height","deleteColumn","CardList","click","allColumns","Column","setFilter","currentTarget","handleChange","background","Filter","HeaderDashboard","ColumnsList","AddBtnColumn"],"sourceRoot":""}