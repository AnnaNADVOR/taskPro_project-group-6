{"version":3,"file":"static/js/849.9093e3bc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Forms/BoardForms/AddColumnForm/AddColumnForm.module.css?8bcc","components/Forms/BoardForms/AddColumnForm/AddColumnForm.jsx","webpack://react-homework-template/./src/components/Board/AddBtnColumn/AddBtnColumn.module.css?57c6","components/Board/AddBtnColumn/AddBtnColumn.jsx","webpack://react-homework-template/./src/components/PriorityOptions/PriorityOptions.module.css?75cd","components/PriorityOptions/PriorityOptions.jsx","webpack://react-homework-template/./src/components/Calendar/Calendar.module.css?a426","components/Calendar/Calendar.jsx","webpack://react-homework-template/./src/components/Forms/BoardForms/CardForm/CardForm.module.css?1a90","components/Forms/BoardForms/CardForm/CardForm.jsx","webpack://react-homework-template/./src/components/CardList/Progress/Progress.module.css?3286","components/CardList/Progress/Progress.jsx","webpack://react-homework-template/./src/components/CardList/Card/Card.module.css?9f53","components/CardList/Card/Card.jsx","components/CardList/CradList.jsx","webpack://react-homework-template/./src/components/ColumnsList/ColumnsList.module.css?4558","components/ColumnsList/Column.jsx","components/ColumnsList/ColumnsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Board/HeaderDashboard/HeaderDashboard.module.css?275b","components/Board/HeaderDashboard/HeaderDashboard.jsx","webpack://react-homework-template/./src/components/ScreensPage/Screens.page.module.css?c90b","components/ScreensPage/Screens.page.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addColumnModalTitle\":\"AddColumnForm_addColumnModalTitle__whRgL\",\"addColumnForm\":\"AddColumnForm_addColumnForm__PHu-J\",\"addColumnInput\":\"AddColumnForm_addColumnInput__6QVuw\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport MainAddButton from 'components/Buttons/MainAddButton/MainAddButton';\nimport { addColumn, editColumn } from '../../../../redux/boards/operation';\nimport { selectBoard } from '../../../../redux/boards/selectors';\n\nimport css from './AddColumnForm.module.css';\n\nconst addColumnSchema = Yup.object().shape({\n  columnTitle: Yup.string().required('Please enter the title'),\n});\n\nconst AddColumnForm = ({\n  title,\n  action,\n  columnId,\n  columnTitle,\n  handleEditClose,\n  handleClose,\n}) => {\n  const board = useSelector(selectBoard);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    if (columnId) {\n      dispatch(\n        editColumn({\n          columnId: columnId,\n          newColumnData: {\n            board: board._id,\n            title: values.columnTitle,\n          },\n        })\n      );\n      actions.resetForm();\n      handleEditClose();\n    } else {\n      dispatch(\n        addColumn({\n          title: values.columnTitle,\n          board: board._id,\n        })\n      );\n      actions.resetForm();\n      handleClose();\n    }\n  };\n  const initialValues = {\n    columnTitle: '',\n  };\n\n  if (columnId) {\n    initialValues.columnTitle = columnTitle;\n  }\n\n  return (\n    <Formik\n      validationSchema={addColumnSchema}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <h3 className={css.addColumnModalTitle}>{title}</h3>\n        <Field\n          className={css.addColumnInput}\n          as=\"input\"\n          type=\"text\"\n          name=\"columnTitle\"\n          placeholder=\"Title\"\n          required={true}\n          autoFocus\n        />\n        <MainAddButton text={action} />\n      </Form>\n    </Formik>\n  );\n};\n\nexport default AddColumnForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"btnAddColumn\":\"AddBtnColumn_btnAddColumn__PKhFZ\",\"btnPlus\":\"AddBtnColumn_btnPlus__wZkNB\"};","import { useState } from 'react';\n\nimport Modal from 'components/Modal/Modal';\nimport AddColumnForm from '../../Forms/BoardForms/AddColumnForm/AddColumnForm';\nimport sprite from 'assets/images/sprite.svg';\n\nimport css from './AddBtnColumn.module.css';\n\nconst AddBtnColumn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <>\n      <button className={css.btnAddColumn} type=\"button\" onClick={toggleModal}>\n        <div className={css.btnPlus}>\n          <svg aria-label=\"plus\">\n            <use href={`${sprite}#plus-20`}></use>\n          </svg>\n        </div>\n        <p className={css.btnText}>Add another column</p>\n      </button>\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n          <AddColumnForm\n            title=\"Add column\"\n            action=\"Add\"\n            handleClose={toggleModal}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default AddBtnColumn;\n","// extracted by mini-css-extract-plugin\nexport default {\"labelWrapper\":\"PriorityOptions_labelWrapper__Byxtu\",\"label\":\"PriorityOptions_label__MK2FN\"};","import { Field } from 'formik';\n\nimport css from './PriorityOptions.module.css';\n\nconst PriorityOptions = ({ options, priority, active }) => {\n  return (\n    <ul className={css.labelWrapper}>\n      {options.map(({ value, color }) => (\n        <li key={value}>\n          <Field\n            as=\"input\"\n            type=\"radio\"\n            name=\"priority\"\n            value={value}\n            checked={priority === value}\n            className={css.label}\n            style={{ backgroundColor: color }}\n            onClick={active}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default PriorityOptions;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Calendar_button__9bAG0\"};","import { forwardRef } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport en from 'date-fns/locale/en-GB';\nimport sprite from '../../assets/images/sprite.svg';\n\nimport css from './Calendar.module.css';\n\nconst Calendar = ({ date, changeDate }) => {\n  const getDateFormat = date => {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    if (\n      date.getDate() === today.getDate() &&\n      date.getMonth() === today.getMonth() &&\n      date.getFullYear() === today.getFullYear()\n    ) {\n      return \"'Today', MMMM dd\";\n    } else if (\n      date.getDate() === tomorrow.getDate() &&\n      date.getMonth() === tomorrow.getMonth() &&\n      date.getFullYear() === tomorrow.getFullYear()\n    ) {\n      return \"'Tomorrow', MMMM dd\";\n    } else {\n      return 'EEEE, MMMM dd';\n    }\n  };\n\n  const CustomInput = forwardRef(({ value, onClick }, ref) => (\n    <button type=\"button\" className={css.button} onClick={onClick} ref={ref}>\n      {value}\n      <svg>\n        <use href={`${sprite}#select-menu-16`} />\n      </svg>\n    </button>\n  ));\n\n  return (\n    <DatePicker\n      className={css.picker}\n      locale={en}\n      selected={date}\n      onChange={changeDate}\n      minDate={new Date()}\n      dateFormat={getDateFormat(date)}\n      onFocus={event => event.target.blur()}\n      onKeyDown={event => event.preventDefault()}\n      customInput={<CustomInput />}\n    />\n  );\n};\n\nexport default Calendar;\n","// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"CardForm_formTitle__UxmMR\",\"formText\":\"CardForm_formText__Lrywy\",\"inputForm\":\"CardForm_inputForm__Pjbp4\",\"errorField\":\"CardForm_errorField__u4Pnb\",\"label\":\"CardForm_label__yLVGx\",\"description\":\"CardForm_description__JlASz CardForm_inputForm__Pjbp4\",\"priorityWrapper\":\"CardForm_priorityWrapper__AUS8j\",\"deadlineWrapper\":\"CardForm_deadlineWrapper__9e5ip\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport PriorityOptions from '../../../PriorityOptions/PriorityOptions';\nimport Calendar from '../../../Calendar/Calendar';\nimport MainAddButton from '../../../Buttons/MainAddButton/MainAddButton';\nimport { addTask, editTask } from '../../../../redux/boards/operation';\n\nimport css from './CardForm.module.css';\n\nconst addCardSchema = Yup.object().shape({\n  cardTitle: Yup.string()\n    .required('Please enter the title')\n    .max(25, 'Must be no more than 25 characters long'),\n  description: Yup.string(),\n});\n\nconst CardForm = ({\n  title,\n  action,\n  taskTitle,\n  taskDescription,\n  taskPriority,\n  taskDeadline,\n  taskId,\n  columnId,\n  handleClose,\n}) => {\n  const initialValues = {\n    cardTitle: '',\n    description: '',\n  };\n\n  const [priority, setPriority] = useState(taskPriority || 'Without');\n  const [deadline, setDeadline] = useState(\n    taskDeadline ? new Date(taskDeadline) : new Date()\n  );\n\n  if (taskId) {\n    initialValues.cardTitle = taskTitle;\n    initialValues.description = taskDescription;\n  }\n  const priorityChange = event => {\n    setPriority(event.target.value);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const newCard = {\n      _id: taskId,\n      column: columnId,\n      title: values.cardTitle,\n      description: values.description,\n      priority: priority,\n      deadline: deadline.toISOString(),\n    };\n\n    const editCard = {\n      _id: taskId,\n      column: columnId,\n      title: values.cardTitle,\n      description: values.description,\n      priority: priority,\n      deadline: deadline.toISOString(),\n    };\n    if (taskId) {\n      dispatch(editTask(editCard));\n      actions.resetForm();\n      handleClose();\n    } else {\n      dispatch(addTask(newCard));\n      actions.resetForm();\n      handleClose();\n    }\n  };\n\n  const priorityOptions = [\n    { value: 'Low', color: `var(--priority-low-color)` },\n    { value: 'Medium', color: `var(--priority-medium-color)` },\n    { value: 'High', color: `var(--priority-high-color)` },\n    { value: 'Without', color: `var(--priority-color-without)` },\n  ];\n\n  return (\n    <Formik\n      validationSchema={addCardSchema}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <h4 className={css.formTitle}>{title}</h4>\n        <label className={css.label} htmlFor=\"cardTitle\">\n          <Field\n            className={css.inputForm}\n            as=\"input\"\n            type=\"text\"\n            name=\"cardTitle\"\n            placeholder=\"Title\"\n            required={true}\n            autoFocus\n          />\n          <span className={css.errorField}>\n            <ErrorMessage name=\"cardTitle\" />\n          </span>\n        </label>\n        <label htmlFor=\"description\">\n          <Field\n            className={css.description}\n            as=\"textarea\"\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            required={true}\n          />\n        </label>\n        <div className={css.priorityWrapper}>\n          <p className={css.formText}>Label color</p>\n          <PriorityOptions\n            options={priorityOptions}\n            priority={priority}\n            active={priorityChange}\n          />\n        </div>\n        <div className={css.deadlineWrapper}>\n          <p className={css.formText}>Deadline</p>\n          <Calendar date={deadline} changeDate={setDeadline} />\n        </div>\n        <MainAddButton text={action} />\n      </Form>\n    </Formik>\n  );\n};\n\nexport default CardForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"popupMenu\":\"Progress_popupMenu__BWCqT\",\"progressList\":\"Progress_progressList__kvm4P\",\"progressListBtn\":\"Progress_progressListBtn__Hv5GC\",\"progressBtnSvg\":\"Progress_progressBtnSvg__15GWP\"};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { replaceTask } from '../../../redux/boards/operation';\nimport { selecColumnList } from '../../../redux/boards/selectors';\nimport sprite from 'assets/images/sprite.svg';\n\nimport css from './Progress.module.css';\n\nconst Progress = ({ closeMenu, columnId, currentTask }) => {\n  const columnsList = useSelector(selecColumnList);\n  const columnsWithoutCurrent = columnsList.filter(\n    column => column._id !== columnId\n  );\n\n  useEffect(() => {\n    const onEscClick = event => {\n      if (event.code === 'Escape') {\n        closeMenu();\n      }\n    };\n    window.addEventListener('keydown', onEscClick);\n    return () => {\n      window.removeEventListener('keydown', onEscClick);\n    };\n  }, [closeMenu]);\n\n  const dispatch = useDispatch();\n  const handleClick = newColumnId => {\n    dispatch(\n      replaceTask({\n        taskId: currentTask._id,\n        columnId: newColumnId,\n        currentColumnId: columnId,\n      })\n    );\n  };\n\n  return (\n    <div className={css.popupMenu}>\n      <ul className={css.progressList}>\n        {columnsWithoutCurrent.map(column => (\n          <li key={column.title}>\n            <button\n              className={css.progressListBtn}\n              onClick={() => handleClick(column._id)}\n              type=\"button\"\n            >\n              {column.title}\n              <svg className={css.progressBtnSvg}>\n                <use href={`${sprite}#remove-16`}></use>\n              </svg>\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Progress;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9i1e0\",\"cardTitle\":\"Card_cardTitle__WOpNK\",\"cardDescription\":\"Card_cardDescription__asnRe\",\"cardOptions\":\"Card_cardOptions__Jpn8u\",\"optionsInfo\":\"Card_optionsInfo__Ur7lv\",\"optonWrapper\":\"Card_optonWrapper__paaQk\",\"optionTitle\":\"Card_optionTitle__Xwwk2\",\"priorityMark\":\"Card_priorityMark__P5D5u\",\"priorityLabel\":\"Card_priorityLabel__UV0uv\",\"optionsBtnList\":\"Card_optionsBtnList__MCRS8\",\"optionBtn\":\"Card_optionBtn__O+R+M\",\"deadlineNotify\":\"Card_deadlineNotify__l71UH\",\"btnItem\":\"Card_btnItem__tGlpJ\",\"optionBtnSvg\":\"Card_optionBtnSvg__gpnjf\",\"bell\":\"Card_bell__9Ck4Y\",\"progressContainer\":\"Card_progressContainer__MLD9P\",\"cardList\":\"Card_cardList__0WbY0\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Modal from 'components/Modal/Modal';\nimport CardForm from 'components/Forms/BoardForms/CardForm/CardForm';\nimport Progress from '../Progress/Progress';\nimport { deleteTask } from '../../../redux/boards/operation';\nimport sprite from '../../../assets/images/sprite.svg';\n\nimport css from './Card.module.css';\n\nconst Card = ({ newCard, columnId }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n\n  const toggleModal = () => setShowModal(prevShowModal => !prevShowModal);\n  const toggleMenu = () => setShowMenu(prevShowMenu => !prevShowMenu);\n\n  const dispatch = useDispatch();\n\n  const onDeleteTask = () => {\n    dispatch(deleteTask(newCard._id));\n  };\n  const today = new Date()\n    .toISOString()\n    .replace(/T.*/, '')\n    .split('-')\n    .reverse()\n    .join('/');\n  const deadline = newCard.deadline\n    .replace(/T.*/, '')\n    .split('-')\n    .reverse()\n    .join('/');\n\n  const priority = newCard.priority;\n  let color;\n  switch (priority) {\n    case 'Low':\n      color = 'var(--priority-low-color)';\n      break;\n    case 'Medium':\n      color = 'var(--priority-medium-color)';\n      break;\n    case 'High':\n      color = 'var(--priority-high-color)';\n      break;\n    case 'Without':\n      color = 'var(--priority-color-without)';\n      break;\n    default:\n      color = `var(--priority-color-without)`;\n  }\n\n  return (\n    <>\n      <div className={css.card} style={{ borderLeft: `4px solid ${color}` }}>\n        <h4 className={css.cardTitle}>{newCard.title}</h4>\n        <p className={css.cardDescription}>{newCard.description}</p>\n        <div className={css.cardOptions}>\n          <div className={css.optionsInfo}>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Priority</h5>\n              <div className={css.priorityLabel}>\n                <span\n                  className={css.priorityMark}\n                  style={{ backgroundColor: color }}\n                ></span>\n                <p>{newCard.priority}</p>\n              </div>\n            </div>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Deadline</h5>\n              <p>{deadline}</p>\n            </div>\n          </div>\n          <ul className={css.optionsBtnList}>\n            {today === deadline && (\n              <li className={css.deadlineNotify}>\n                <button className={css.optionBtn} type=\"button\">\n                  <svg className={css.bell}>\n                    <use href={`${sprite}#bell-16`}></use>\n                  </svg>\n                </button>\n              </li>\n            )}\n\n            <li>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleMenu}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#remove-16`}></use>\n                </svg>\n              </button>\n              <div className={css.progressContainer}>\n                {showMenu && (\n                  <Progress\n                    closeMenu={toggleMenu}\n                    columnId={columnId}\n                    currentTask={newCard}\n                  />\n                )}\n              </div>\n            </li>\n            <li className={css.btnItem}>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleModal}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#pencil-16`}></use>\n                </svg>\n              </button>\n            </li>\n            <li>\n              <button\n                className={css.optionBtn}\n                onClick={onDeleteTask}\n                type=\"button\"\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#trash-16`}></use>\n                </svg>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {showModal && (\n        <Modal closeModal={toggleModal}>\n          <CardForm\n            title=\"Edit card\"\n            action=\"Edit\"\n            taskTitle={newCard.title}\n            taskDescription={newCard.description}\n            taskId={newCard._id}\n            taskPriority={newCard.priority}\n            taskDeadline={newCard.deadline}\n            columnId={newCard.columnId}\n            handleClose={toggleModal}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Card;\n","import { useSelector } from 'react-redux';\n\nimport { selectVisibleTasks } from '../../redux/boards/selectors';\nimport Card from '../CardList/Card/Card';\n\nimport css from '../CardList/Card/Card.module.css';\n\nconst CardList = ({ columnId }) => {\n  const visibleCards = useSelector(selectVisibleTasks);\n  const columnCards = visibleCards.filter(item => item.columnId === columnId);\n  return (\n    <ul className={css.cardList}>\n      {columnCards.length > 0 && (\n        <>\n          {columnCards.map(card => (\n            <li key={card._id}>\n              <Card newCard={card} columnId={columnId} />\n            </li>\n          ))}\n        </>\n      )}\n    </ul>\n  );\n};\n\nexport default CardList;\n","// extracted by mini-css-extract-plugin\nexport default {\"columnsListContainer\":\"ColumnsList_columnsListContainer__y1n-3\",\"columnList\":\"ColumnsList_columnList__Oh-td\",\"columnItem\":\"ColumnsList_columnItem__fGEt7\",\"columnTitle\":\"ColumnsList_columnTitle__JgLbv\",\"btnIcon\":\"ColumnsList_btnIcon__dIt+m\",\"columnTitleIcon\":\"ColumnsList_columnTitleIcon__cKKEZ\",\"cardContainer\":\"ColumnsList_cardContainer__c+bP9\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport CardList from '../CardList/CradList';\nimport MainAddButton from '../Buttons/MainAddButton/MainAddButton';\nimport Modal from '../Modal/Modal';\nimport CardForm from '../Forms/BoardForms/CardForm/CardForm';\nimport { deleteColumn } from '../../redux/boards/operation';\nimport AddColumnForm from '../Forms/BoardForms/AddColumnForm/AddColumnForm';\nimport sprite from '../../assets/images/sprite.svg';\n\nimport css from '../ColumnsList/ColumnsList.module.css';\n\nconst Column = ({ id, title }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isModalColumnOpen, setIsModalColumnOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  const handleModalColumnOpen = () => {\n    setIsModalColumnOpen(isModalColumnOpen => !isModalColumnOpen);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleRemoveClick = () => {\n    dispatch(deleteColumn(id));\n  };\n\n  return (\n    <>\n      <p className={css.columnTitle}>\n        {title}\n        <button\n          className={css.btnIcon}\n          onClick={handleModalColumnOpen}\n          type=\"button\"\n        >\n          <svg className={css.columnTitleIcon} width={16} height={16}>\n            <use href={`${sprite}#pencil-16`}></use>\n          </svg>\n        </button>\n        <button\n          className={css.btnIcon}\n          onClick={handleRemoveClick}\n          type=\"button\"\n        >\n          <svg className={css.columnTitleIcon} width={16} height={16}>\n            <use href={`${sprite}#trash-16`}></use>\n          </svg>\n        </button>\n      </p>\n      <div className={css.cardContainer}>\n        <CardList columnId={id} />\n      </div>\n      <MainAddButton text=\"Add another card\" click={toggleModal} />\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n          <CardForm\n            title=\"Add card\"\n            action=\"Add\"\n            columnId={id}\n            handleClose={toggleModal}\n          />\n        </Modal>\n      )}\n      {isModalColumnOpen && (\n        <Modal closeModal={handleModalColumnOpen}>\n          <AddColumnForm\n            title=\"Edit column\"\n            action=\"Edit\"\n            columnId={id}\n            columnTitle={title}\n            handleEditClose={handleModalColumnOpen}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Column;\n","import { useSelector } from 'react-redux';\n\nimport { selecColumnList } from '../../redux/boards/selectors';\nimport AddBtnColumn from 'components/Board/AddBtnColumn/AddBtnColumn';\nimport Column from './Column';\n\nimport css from './ColumnsList.module.css';\n\nconst ColumnsList = () => {\n  const allColumns = useSelector(selecColumnList);\n\n  return (\n    <>\n      <div className={css.columnsListContainer}>\n        <ul className={css.columnList}>\n          {allColumns?.map(column => (\n            <li key={column._id} className={css.columnItem}>\n              <Column id={column._id} title={column.title} column={column} />\n            </li>\n          ))}\n        </ul>\n        <AddBtnColumn />\n      </div>\n    </>\n  );\n};\n\nexport default ColumnsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"filterContainer\":\"Filter_filterContainer__8G57N\",\"textLeabel\":\"Filter_textLeabel__QUz2b\",\"buttonLeabel\":\"Filter_buttonLeabel__JxnC3\",\"leabelGroup\":\"Filter_leabelGroup__06GpO\",\"label\":\"Filter_label__vEd1E\",\"labeltext\":\"Filter_labeltext__wgxuo\",\"filterForm\":\"Filter_filterForm__+l+6Q\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\n\nimport { setFilter } from '../../redux/filter/slice';\n\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  const [priority, setPriority] = useState('');\n\n  const priorityOptions = [\n    {\n      value: 'Without',\n      color: `var(--priority-color-without)`,\n      text: 'Without priority',\n    },\n    { value: 'Low', color: `var(--priority-low-color)`, text: 'Low' },\n    { value: 'Medium', color: `var(--priority-medium-color)`, text: 'Medium' },\n    { value: 'High', color: `var(--priority-high-color)`, text: 'High' },\n  ];\n\n  const handleChange = event => {\n    setPriority(event.target.value);\n  };\n  const handleShowAll = () => {\n    setPriority('');\n    dispatch(setFilter(''));\n  };\n\n  const initialValues = {\n    background: '00',\n    priority: '',\n  };\n  return (\n    <div>\n      <h2 className={css.filterTitle}>Filters</h2>\n      <Formik initialValues={initialValues}>\n        <Form onChange={handleChange} className={css.filterForm}>\n          <div className={css.filterContainer}>\n            <div className={css.filterWrap}>\n              <p className={css.textLeabel}>Label color</p>\n              <button\n                type=\"button\"\n                onClick={handleShowAll}\n                className={css.buttonLeabel}\n              >\n                Show all\n              </button>\n            </div>\n\n            {\n              <ul>\n                {priorityOptions.map(({ value, color, text }) => (\n                  <li key={value} className={css.leabelGroup}>\n                    <Field\n                      as=\"input\"\n                      type=\"radio\"\n                      name=\"priority\"\n                      value={value}\n                      checked={priority === value}\n                      style={{ backgroundColor: color }}\n                      onClick={handleChange}\n                      onChange={onChange}\n                      className={css.label}\n                    />{' '}\n                    <span className={css.labeltext}> {text}</span>\n                  </li>\n                ))}\n              </ul>\n            }\n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HeaderDashboard_container__CSoUF\",\"projectTitle\":\"HeaderDashboard_projectTitle__F-IyU\",\"buttonFilter\":\"HeaderDashboard_buttonFilter__Ns8y8\",\"modalStyle\":\"HeaderDashboard_modalStyle__jVe5R\",\"filterTitle\":\"HeaderDashboard_filterTitle__trtwk\"};","import { useState } from 'react';\n\nimport Filter from 'components/Filter/Filter';\nimport Modal from 'components/Modal/Modal';\nimport sprite from 'assets/images/sprite.svg';\n\nimport css from './HeaderDashboard.module.css';\n\nconst HeaderDashboard = ({ title }) => {\n  const [isOpen, setIsOpen] = useState();\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <div className={css.container}>\n      <h2 className={css.projectTitle}>{title}</h2>\n      <button className={css.buttonFilter} type=\" button\" onClick={toggleModal}>\n        <svg\n          className={css.filterIcon}\n          aria-label=\"filter icon\"\n          width=\"16\"\n          height=\"16\"\n        >\n          <use href={`${sprite}#filter-16`}></use>\n        </svg>\n        <p className={css.filterTitle}>Filters</p>\n      </button>\n      {isOpen && (\n        <Modal\n          style={css.modalStyle}\n          closeModal={toggleModal}\n          children={<Filter />}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default HeaderDashboard;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Screens_page_container__51p2p\",\"bgImage1\":\"Screens_page_bgImage1__OydW4\",\"bgImage2\":\"Screens_page_bgImage2__fmZk6\",\"bgImage3\":\"Screens_page_bgImage3__t38vE\",\"bgImage4\":\"Screens_page_bgImage4__0wNGd\",\"bgImage5\":\"Screens_page_bgImage5__OhxDX\",\"bgImage6\":\"Screens_page_bgImage6__g7WiG\",\"bgImage7\":\"Screens_page_bgImage7__rP--d\",\"bgImage8\":\"Screens_page_bgImage8__zQy49\",\"bgImage9\":\"Screens_page_bgImage9__-53iA\",\"bgImage10\":\"Screens_page_bgImage10__Kt+5F\",\"bgImage11\":\"Screens_page_bgImage11__KiLH2\",\"bgImage12\":\"Screens_page_bgImage12__Olz6K\",\"bgImage13\":\"Screens_page_bgImage13__jh2yT\",\"bgImage14\":\"Screens_page_bgImage14__HbmEn\",\"bgImage15\":\"Screens_page_bgImage15__JIqvf\"};","import { useSelector } from 'react-redux';\nimport ColumnsList from '../ColumnsList/ColumnsList';\nimport HeaderDashboard from 'components/Board/HeaderDashboard/HeaderDashboard';\nimport { selectBoard } from '../../redux/boards/selectors';\nimport css from './Screens.page.module.css';\n\nconst ScreensPage = () => {\n  const { title, background } = useSelector(selectBoard);\n  \n  const getClassForBackground = background => {\n    switch (background) {\n      case '01':\n        return css.bgImage1;\n      case '02':\n        return css.bgImage2;\n      case '03':\n        return css.bgImage3;\n      case '04':\n        return css.bgImage4;\n      case '05':\n        return css.bgImage5;\n      case '06':\n        return css.bgImage6;\n      case '07':\n        return css.bgImage7;\n      case '08':\n        return css.bgImage8;\n      case '09':\n        return css.bgImage9;\n      case '10':\n        return css.bgImage10;\n      case '11':\n        return css.bgImage11;\n      case '12':\n        return css.bgImage12;\n      case '13':\n        return css.bgImage13;\n      case '14':\n        return css.bgImage14;\n      case '15':\n        return css.bgImage15;\n      default:\n        break;\n    }\n  };\n\n  const containerClass = `${css.container} ${getClassForBackground(background)}`;\n  return (\n    <>\n      <HeaderDashboard title={title} />\n      <div className={containerClass}>\n        <ColumnsList />\n      </div>\n    </>\n  );\n};\n\nexport default ScreensPage;\n"],"names":["addColumnSchema","Yup","shape","columnTitle","required","_ref","title","action","columnId","handleEditClose","handleClose","board","useSelector","selectBoard","dispatch","useDispatch","initialValues","_jsx","Formik","validationSchema","onSubmit","values","actions","editColumn","newColumnData","_id","resetForm","addColumn","children","_jsxs","Form","autoComplete","className","css","Field","as","type","name","placeholder","autoFocus","MainAddButton","text","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","toggleModal","_Fragment","onClick","href","concat","sprite","Modal","closeModal","AddColumnForm","options","priority","active","map","_ref2","value","color","checked","style","backgroundColor","date","changeDate","CustomInput","forwardRef","ref","DatePicker","locale","en","selected","onChange","minDate","Date","dateFormat","today","tomorrow","setDate","getDate","getMonth","getFullYear","getDateFormat","onFocus","event","target","blur","onKeyDown","preventDefault","customInput","addCardSchema","cardTitle","max","description","taskTitle","taskDescription","taskPriority","taskDeadline","taskId","setPriority","_useState3","_useState4","deadline","setDeadline","newCard","column","toISOString","editCard","editTask","addTask","htmlFor","ErrorMessage","PriorityOptions","Calendar","closeMenu","currentTask","columnsWithoutCurrent","selecColumnList","filter","useEffect","onEscClick","code","window","addEventListener","removeEventListener","newColumnId","replaceTask","currentColumnId","showModal","setShowModal","showMenu","setShowMenu","prevShowModal","toggleMenu","prevShowMenu","replace","split","reverse","join","borderLeft","Progress","deleteTask","CardForm","columnCards","selectVisibleTasks","item","length","card","Card","id","isModalColumnOpen","setIsModalColumnOpen","handleModalColumnOpen","width","height","deleteColumn","CardList","click","allColumns","Column","AddBtnColumn","setFilter","currentTarget","handleChange","background","Filter","_useSelector","containerClass","getClassForBackground","HeaderDashboard","ColumnsList"],"sourceRoot":""}