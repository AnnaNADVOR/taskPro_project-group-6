{"version":3,"file":"static/js/118.9e33ea5a.chunk.js","mappings":"uNACA,GAAgB,aAAe,mCAAmC,QAAU,+B,8BCA5E,EAAsC,2CAAtC,EAAuJ,sC,8BCA1IA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,KAAM,E,UCSjDC,EAAkBC,EAAAA,KAAaC,MAAM,CACvCC,YAAaF,EAAAA,KACRG,SAAS,4BAmClB,EAhCsB,WACpB,IAAML,GAAQM,EAAAA,EAAAA,IAAYT,GACpBU,GAAWC,EAAAA,EAAAA,MAUjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,iBAAkBV,EACxBW,cAAe,CAAER,YAAa,IAC9BS,SAXiB,SAACC,EAAQC,GAC5BR,GAASS,EAAAA,EAAAA,GAAU,CACjBC,MAAOH,EAAOV,YACdJ,MAAOA,EAAMkB,OAEfH,EAAQI,WACV,EAK2BC,UACvBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAF,SAAA,EACHX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAwBJ,SAAC,gBACxCX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACF,UAAWC,EAChBE,GAAG,QACHC,KAAK,OACLC,KAAK,cACLC,YAAY,QACZxB,UAAU,EACVyB,WAAS,KAEXrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,CAACC,KAAK,YAI5B,ECbA,EA1BqB,WACnB,IAAAC,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAElBI,EAAc,WAClBD,GAAU,SAAAD,GAAM,OAAKA,CAAM,GAC7B,EAEA,OACEhB,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACEC,EAAAA,EAAAA,MAAA,UAAQE,UAAWC,EAAAA,aAAkBG,KAAK,SAASc,QAASF,EAAYnB,SAAA,EACtEX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,QAAYJ,UAC1BX,EAAAA,EAAAA,KAAA,OAAK,aAAW,OAAMW,UACpBX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,mBAGxBnC,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAAA,QAAYJ,SAAC,0BAE5BiB,IACC5B,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYP,EAAYnB,UAC7BX,EAAAA,EAAAA,KAACsC,EAAa,QAKxB,EC7BA,EAA4B,4BAA5B,EAAmE,2BAAnE,EAA0G,4BAA1G,EAAmJ,6BAAnJ,EAAwL,wBAAxL,EAA8N,wDAA9N,EAAwS,kCAAxS,EAA4V,kCCA5V,EAA+B,sCAA/B,EAA6E,+BCuB7E,EArBwB,SAAHC,GAAsC,IAAjCC,EAAOD,EAAPC,QAASC,EAAQF,EAARE,SAAUC,EAAMH,EAANG,OACzC,OACI1C,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAiBJ,SAC3B6B,EAAQG,KAAI,SAAAC,GAAA,IAAGC,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MAAK,OACxB9C,EAAAA,EAAAA,KAAA,MAAAW,UACIX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACFC,GAAG,QACHC,KAAK,QACLC,KAAK,WACL0B,MAAOA,EACPE,QAAWN,IAAaI,EACxB/B,UAAWC,EACXiC,MAAO,CAAEC,gBAAiBH,GAC1Bd,QAASU,KATRG,EAWJ,KAKrB,E,mBCtBA,G,QAAA,CAAgB,OAAS,2B,UCqDzB,EA9CiB,SAAHN,GAA8B,IAAxBW,EAAIX,EAAJW,KAAMC,EAAUZ,EAAVY,WAuBlBC,GAAcC,EAAAA,EAAAA,aAAW,SAAAT,EAAqBU,GAAG,IAArBT,EAAKD,EAALC,MAAOb,EAAOY,EAAPZ,QAAO,OAC9CpB,EAAAA,EAAAA,MAAA,UAAQM,KAAK,SAASJ,UAAWC,EAAAA,OAAYiB,QAASA,EAASsB,IAAKA,EAAI3C,SAAA,CACrEkC,GACD7C,EAAAA,EAAAA,KAAA,OAAAW,UACEX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,yBAEf,IAGX,OACEnC,EAAAA,EAAAA,KAACuD,IAAU,CAACzC,UAAWC,EAAAA,OACrByC,OAAQC,EAAAA,EACRC,SAAUR,EACVS,SAAUR,EACVS,QAAS,IAAIC,KACbC,WApCoB,SAACZ,GACvB,IAAMa,EAAQ,IAAIF,KACZG,EAAW,IAAIH,KAErB,OADAG,EAASC,QAAQF,EAAMG,UAAY,GAEjChB,EAAKgB,YAAcH,EAAMG,WACzBhB,EAAKiB,aAAeJ,EAAMI,YAC1BjB,EAAKkB,gBAAkBL,EAAMK,cAEtB,mBAEPlB,EAAKgB,YAAcF,EAASE,WAC5BhB,EAAKiB,aAAeH,EAASG,YAC7BjB,EAAKkB,gBAAkBJ,EAASI,cAEzB,sBAEA,eAEX,CAiBgBC,CAAcnB,GAC1BoB,QAAS,SAACC,GAAK,OAAKA,EAAMC,OAAOC,MAAM,EACvCC,UAAW,SAACH,GAAK,OAAKA,EAAMI,gBAAgB,EAC5CC,aAAa5E,EAAAA,EAAAA,KAACoD,EAAW,KAG/B,E,UCvCMyB,EAAgBpF,EAAAA,KAAaC,MAAM,CACrCoF,UAAWrF,EAAAA,KACNG,SAAS,0BACTmF,IAAI,GAAI,2CACbC,YAAavF,EAAAA,OA8FjB,EA1FiB,SAAH8C,GAAqG,IAA/F/B,EAAK+B,EAAL/B,MAAOyE,EAAM1C,EAAN0C,OAAQC,EAAS3C,EAAT2C,UAAWC,EAAe5C,EAAf4C,gBAAiBC,EAAY7C,EAAZ6C,aAAcC,EAAY9C,EAAZ8C,aAAcC,EAAM/C,EAAN+C,OAAQC,EAAQhD,EAARgD,SACzFpF,EAAgB,CAClB2E,UAAW,GACXE,YAAa,IAGjBxD,GAAgCC,EAAAA,EAAAA,UAAS2D,GAAgB,WAAU1D,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5DiB,EAAQf,EAAA,GAAE8D,EAAW9D,EAAA,GAC5B+D,GAAgChE,EAAAA,EAAAA,UAAS4D,EAAe,IAAIxB,KAAKwB,GAAgB,IAAIxB,MAAO6B,GAAA/D,EAAAA,EAAAA,GAAA8D,EAAA,GAArFE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtBJ,IACFnF,EAAc2E,UAAYI,EAC1B/E,EAAc6E,YAAcG,GAEhC,IAIMrF,GAAWC,EAAAA,EAAAA,MA2BjB,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,iBAAkB2E,EACtB1E,cAAeA,EACfC,SA5Ba,SAACC,EAAQC,GAC1B,IAAMuF,EAAU,CACZpF,IAAK6E,EACLQ,OAAQP,EACR/E,MAAOH,EAAOyE,UACdE,YAAa3E,EAAO2E,YACpBvC,SAAUA,EACVkD,SAAUA,EAASI,eAEvBC,QAAQC,IAAI,uBAAwBJ,GAEhC/F,EADAwF,GACSY,EAAAA,EAAAA,IAASL,IAEXM,EAAAA,EAAAA,IAAQN,IAEnBvF,EAAQI,WACZ,EAY+BC,UACvBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACuF,aAAa,MAAKzF,SAAA,EACpBX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAcJ,SAAEH,KAC/BI,EAAAA,EAAAA,MAAA,SAAOE,UAAWC,EAAWsF,QAAQ,YAAW1F,SAAA,EAC5CX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACF,UAAWC,EACdE,GAAG,QACHC,KAAK,OACLC,KAAK,YACLC,YAAY,QACZxB,UAAU,EACVyB,WAAS,KAEbrB,EAAAA,EAAAA,KAAA,QAAMc,UAAWC,EAAeJ,UAC5BX,EAAAA,EAAAA,KAACsG,EAAAA,GAAY,CAACnF,KAAK,oBAG3BnB,EAAAA,EAAAA,KAAA,SAAOqG,QAAQ,cAAa1F,UACxBX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACF,UAAWC,EACdE,GAAG,WACHC,KAAK,OACLC,KAAK,cACLC,YAAY,cACZxB,UAAU,OAGlBgB,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAoBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAaJ,SAAC,iBAC5BX,EAAAA,EAAAA,KAACuG,EAAe,CACZ/D,QAtCI,CACpB,CAAEK,MAAO,MAAOC,MAAM,6BACtB,CAAED,MAAO,SAAUC,MAAM,gCACzB,CAAED,MAAO,OAAQC,MAAM,8BACvB,CAAED,MAAO,UAAWC,MAAM,kCAmCVL,SAAUA,EACVC,OAhEG,SAAC6B,GACpBiB,EAAYjB,EAAMC,OAAO3B,MAC7B,QAiEYjC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAoBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAaJ,SAAC,cAC5BX,EAAAA,EAAAA,KAACwG,EAAQ,CAACtD,KAAMyC,EAAUxC,WAAYyC,QAE1C5F,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,CAACC,KAAM0D,QAIrC,EC5GA,EAAuC,0CAAvC,EAA8F,gCAA9F,EAAyL,iCAAzL,EAAoO,6BAApO,EAAmR,qC,UCDtQwB,EAAe,SAAApH,GAAK,OAAIA,EAAMqH,OAAOjE,QAAS,ECG9CkE,EAAc,SAAAtH,GAAK,OAAIA,EAAMuH,MAAMC,SAAU,EAI7CC,GAAqBC,EAAAA,EAAAA,IAAe,CAACJ,EAAaF,IAAe,SAACG,EAAOF,GAElF,OADiBE,EAAMF,QAAO,SAAAM,GAAI,OAAIA,EAAKvE,SAASwE,SAASP,EAAO,GAExE,ICTA,GAAgB,KAAO,mBAAmB,UAAY,wBAAwB,gBAAkB,8BAA8B,YAAc,0BAA0B,YAAc,0BAA0B,aAAe,2BAA2B,YAAc,0BAA0B,aAAe,2BAA2B,cAAgB,4BAA4B,eAAiB,6BAA6B,UAAY,wBAAwB,eAAiB,6BAA6B,QAAU,sBAAsB,aAAe,2BAA2B,KAAO,mBAAmB,kBAAoB,iCCA9mB,EAA4B,4BAA5B,EAAuE,+BAAvE,EAAwH,kCAAxH,EAA2K,iCCyC3K,EArCiB,SAAHnE,GAAqB,IAAhB2E,EAAS3E,EAAT2E,UAqBjB,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,SAAC7C,GACC,WAAfA,EAAM8C,MACRH,GAEJ,EAGA,OADAI,OAAOC,iBAAiB,UAAWH,GAC5B,WACLE,OAAOE,oBAAoB,UAAWJ,EACxC,CACF,GAAG,CAACF,KAGFlH,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAcJ,UAC5BX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAiBJ,SArBjB,CACjB,CAAE8G,GAAI,6BAA8BjH,MAAO,SAC3C,CAAEiH,GAAI,gBAAiBjH,MAAO,QAC9B,CAACiH,GAAI,2BAA4BjH,MAAO,YAmBxBmC,KAAI,SAAAmD,GAAM,OAAI9F,EAAAA,EAAAA,KAAA,MAAAW,UACxBC,EAAAA,EAAAA,MAAA,UAAQE,UAAWC,EAAoBJ,SAAA,CACpCmF,EAAOtF,OACRR,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAmBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,sBAJO2D,EAAOtF,MAOrC,OAIb,EC2FA,GAzHa,SAAH+B,GAAqB,IAAfsD,EAAOtD,EAAPsD,QACdrE,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CkG,EAAShG,EAAA,GAAEiG,EAAYjG,EAAA,GAC9B+D,GAAgChE,EAAAA,EAAAA,WAAS,GAAMiE,GAAA/D,EAAAA,EAAAA,GAAA8D,EAAA,GAAxCmC,EAAQlC,EAAA,GAAEmC,EAAWnC,EAAA,GAEtB5D,EAAc,WAAH,OAAS6F,GAAa,SAAAG,GAAa,OAAKA,CAAa,GAAE,EAClEC,EAAa,WAAH,OAASF,GAAY,SAAAG,GAAY,OAAKA,CAAY,GAAE,GACpEb,EAAAA,EAAAA,YAAU,WAIRG,OAAOC,iBAAiB,aAHG,WACzBM,GAAY,EACd,GAEF,GAAG,IAEH,IAOI/E,EAPEhD,GAAWC,EAAAA,EAAAA,MAKX4F,EAAWE,EAAQF,SAASsC,QAAQ,MAAO,IAAIC,MAAM,KAAKC,UAAUC,KAAK,KAG/E,OAFiBvC,EAAQpD,UAGvB,IAAK,MACHK,EAAQ,4BACR,MACF,IAAK,SACHA,EAAQ,+BACR,MACF,IAAK,OACHA,EAAQ,6BACR,MAIF,QACEA,EAAK,gCAGT,OACElC,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACAC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,KAAUiC,MAAO,CAAEqF,WAAW,aAADnG,OAAeY,IAAUnC,SAAA,EAClEX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,UAAcJ,SAAEkF,EAAQrF,SACvCR,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,EAAAA,gBAAoBJ,SAAEkF,EAAQb,eAC5CpE,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,YAAgBJ,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,YAAgBJ,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,cAAkBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,YAAgBJ,SAAC,cAChCC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,cAAkBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,QACEc,UAAWC,EAAAA,aACXiC,MAAO,CAAEC,gBAAiBH,MAE5B9C,EAAAA,EAAAA,KAAA,KAAAW,SAAIkF,EAAQpD,kBAGhB7B,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAAAA,cAAkBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,YAAgBJ,SAAC,cAChCX,EAAAA,EAAAA,KAAA,KAAAW,SAAIgF,WAGR/E,EAAAA,EAAAA,MAAA,MAAIE,UAAWC,EAAAA,eAAmBJ,SAAA,EAChCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,eAAmBJ,UAChCX,EAAAA,EAAAA,KAAA,UAAQc,UAAWC,EAAAA,UAAeG,KAAK,SAAQP,UAC7CX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,KAASJ,UACvBX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,qBAI1BvB,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEX,EAAAA,EAAAA,KAAA,UACEc,UAAWC,EAAAA,UACXG,KAAK,SACLc,QAAS+F,EAAWpH,UAEpBX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,aAAiBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,qBAGxBnC,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,kBAAsBJ,SACnCiH,IACC5H,EAAAA,EAAAA,KAACsI,EAAQ,CAACpB,UAAaa,UAI7B/H,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAAA,QAAYJ,UACzBX,EAAAA,EAAAA,KAAA,UACEc,UAAWC,EAAAA,UACXG,KAAK,SACLc,QAASF,EAAYnB,UAErBX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,aAAiBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,uBAI1BnC,EAAAA,EAAAA,KAAA,MAAAW,UACEX,EAAAA,EAAAA,KAAA,UAAQc,UAAWC,EAAAA,UAAeiB,QAlFzB,WACnBlC,GAASyI,EAAAA,EAAAA,IAAW1C,EAAQpF,KAC9B,EAgFqES,KAAK,SAAQP,UACpEX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAAA,aAAiBJ,UAC/BX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,8BAQ/BuF,IACC1H,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYP,EAAYnB,UAC7BX,EAAAA,EAAAA,KAACwI,EAAQ,CAAChI,MAAM,YAAYyE,OAAO,OACjCC,UAAWW,EAAQrF,MACnB2E,gBAAiBU,EAAQb,YACzBM,OAAQO,EAAQpF,IAChB2E,aAAcS,EAAQpD,SACtB4C,aAAcQ,EAAQF,SACtBJ,SAAUM,EAAQN,eAK9B,ECxGA,GArBiB,WACb,IAAMkD,GAAQ5I,EAAAA,EAAAA,IAAY8G,GACpB+B,GAAe7I,EAAAA,EAAAA,IAAYiH,GAEjC,OACI9G,EAAAA,EAAAA,KAAA,MAAAW,SACK8H,EAAME,OAAS,GAA6B,IAAxBD,EAAaC,OAAgB3C,QAAQC,IAAI,QAC/DjG,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAApB,SACM+H,EAAa/F,KAAI,SAAAiG,GAAI,OAClB5I,EAAAA,EAAAA,KAAA,MAAAW,UACIX,EAAAA,EAAAA,KAAC6I,GAAI,CAAChD,QAAS+C,KADVA,EAAKnI,IAET,OAQzB,ECnBaqI,IAAmB/B,EAAAA,EAAAA,IAAe,CAAC3H,EAFjB,SAAAC,GAAK,OAAIA,EAAM0J,QAAQC,WAAY,IAEa,SAACzJ,EAAOyJ,GACnF,OAAKzJ,EAAMwJ,QAINC,GAAgBA,EAAYD,QAGdC,EAAYD,QAAQ7G,OAAO3C,EAAMwJ,SAClCrC,QAAO,SAAAuC,GAAI,QAAMA,CAAI,IAH5B1J,EAAMwJ,QAAQrC,QAAO,SAAAuC,GAAI,QAAMA,CAAI,IAJnC,EAQf,IC8CA,GAlDoB,WAClB,IAAAzH,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAElBwH,GAAarJ,EAAAA,EAAAA,IAAYiJ,IAE3BvD,EAAW,GAETzD,EAAc,WAClBD,GAAU,SAAAD,GAAM,OAAKA,CAAM,GAC7B,EAEA,OACEhB,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACEX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAyBJ,UACvCX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,EAAeJ,SAC3BuI,EAAWvG,KAAI,SAAAmD,GAAM,OACpBlF,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,KAAGE,UAAWC,EAAgBJ,SAAA,CAAEmF,EAAOtF,OACrCR,EAAAA,EAAAA,KAAA,UAAQc,UAAWC,EAAYJ,UAC7BX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAqBoI,MAAO,GAAIC,OAAQ,GAAGzI,UACzDX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,qBAG1BnC,EAAAA,EAAAA,KAAA,UAAQc,UAAWC,EAAYJ,UAC3BX,EAAAA,EAAAA,KAAA,OAAKc,UAAWC,EAAqBoI,MAAO,GAAIC,OAAQ,GAAGzI,UACzDX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,uBAIvBnC,EAAAA,EAAAA,KAAA,OAAAW,UACFX,EAAAA,EAAAA,KAACqJ,GAAQ,OAEVrJ,EAAAA,EAAAA,KAACsB,EAAAA,EAAa,CAACC,KAAK,mBAAmB+H,MAAO,WAC5C/D,EAAWO,EAAOrF,IAClBqB,GACF,MAnBOgE,EAAOrF,IAoBX,QAKVmB,IACC5B,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAACC,WAAYP,EAAYnB,UAC7BX,EAAAA,EAAAA,KAACwI,EAAQ,CAAChI,MAAM,WAAWyE,OAAO,MAAMM,SAAUA,QAK5D,ECzDA,GAA4B,gCCA5B,GAA8B,4BAA9B,GAAuE,2BAAvE,GAAoH,gCAApH,GAAiK,2BAAjK,GAA2M,6BAA3M,GAAsP,4BAAtP,GAA0R,sBAA1R,GAA4T,0B,WCqF5T,GA/Ee,WAEb,IAAMmB,GAAS7G,EAAAA,EAAAA,IAAY4G,GAC3BT,QAAQC,IAAI,UAAUS,GACtB,IAAM5G,GAAWC,EAAAA,EAAAA,MAET4D,EAAW,SAAAY,GACbzE,GAASyJ,EAAAA,GAAAA,GAAUhF,EAAMiF,cAAc3G,OAC3C,EAEFrB,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCiB,EAAQf,EAAA,GAAE8D,EAAW9D,EAAA,GAatB+H,EAAe,SAAAlF,GACnBiB,EAAYjB,EAAMC,OAAO3B,MAC3B,EAWA,OACEjC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,GAAgBJ,SAAC,aAChCX,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACE,cAPU,CACpBuJ,WAAY,KACZjH,SAAU,IAK6B9B,UACnCX,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAAC8C,SAAU8F,EAAa9I,UAC3BC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAoBJ,SAAA,EAClCC,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAeJ,SAAA,EAC7BX,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,GAAeJ,SAAC,iBAC9BX,EAAAA,EAAAA,KAAA,UACEkB,KAAK,SACLc,QApBQ,WACpBwD,EAAY,IACZ1F,GAASyJ,EAAAA,GAAAA,GAAU,IAErB,EAiBczI,UAAWC,GAAiBJ,SAC7B,iBAMDX,EAAAA,EAAAA,KAAA,MAAAW,SA1CY,CACtB,CACEkC,MAAO,UACPC,MAAM,gCACNvB,KAAM,oBAER,CAAEsB,MAAO,MAAOC,MAAM,4BAA8BvB,KAAM,OAC1D,CAAEsB,MAAO,SAAUC,MAAM,+BAAiCvB,KAAM,UAChE,CAAEsB,MAAO,OAAQC,MAAM,6BAA+BvB,KAAM,SAmC/BoB,KAAI,SAAAJ,GAAA,IAAGM,EAAKN,EAALM,MAAOC,EAAKP,EAALO,MAAOvB,EAAIgB,EAAJhB,KAAI,OACxCX,EAAAA,EAAAA,MAAA,MAAgBE,UAAWC,GAAgBJ,SAAA,EACzCX,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACJC,GAAG,QACHC,KAAK,QACLC,KAAK,WACL0B,MAAOA,EACPE,QAASN,IAAaI,EACtBG,MAAO,CAAEC,gBAAiBH,GAC1Bd,QAASyH,EACT9F,SAAWA,EACX7C,UAAWC,KACV,KACHH,EAAAA,EAAAA,MAAA,QAAME,UAAWC,GAAcJ,SAAA,CAAC,IAAEY,OAZ3BsB,EAaJ,eASvB,ECpFA,IAAgB,UAAY,mCAAmC,aAAe,sCAAsC,aAAe,sCAAsC,WAAa,oCAAoC,YAAc,sCCoCxO,GA/BwB,WACtB,IAAArB,GAA4BC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAClBI,EAAc,WAClBD,GAAU,SAAAD,GAAM,OAAKA,CAAM,GAC7B,EAEA,OACEhB,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAAA,UAAcJ,SAAA,EAC5BX,EAAAA,EAAAA,KAAA,MAAIc,UAAWC,GAAAA,aAAiBJ,SAAC,qBACjCC,EAAAA,EAAAA,MAAA,UAAQE,UAAWC,GAAAA,aAAkBG,KAAK,UAAUc,QAASF,EAAYnB,SAAA,EACvEX,EAAAA,EAAAA,KAAA,OACEc,UAAWC,GAAAA,WACX,aAAW,cACXoI,MAAM,KACNC,OAAO,KAAIzI,UAEXX,EAAAA,EAAAA,KAAA,OAAKiC,KAAI,GAAAC,OAAKC,EAAAA,EAAM,mBAEtBnC,EAAAA,EAAAA,KAAA,KAAGc,UAAWC,GAAAA,YAAgBJ,SAAC,eAEhCiB,IACC5B,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CACJY,MAAOjC,GAAAA,WACPsB,WAAYP,EACZnB,UAAUX,EAAAA,EAAAA,KAAC2J,GAAM,QAK3B,EClBA,GAZoB,WAClB,OACE/I,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAApB,SAAA,EACEX,EAAAA,EAAAA,KAAC4J,GAAe,KAChBhJ,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,GAAcJ,SAAA,EAC5BX,EAAAA,EAAAA,KAAC6J,GAAW,KACZ7J,EAAAA,EAAAA,KAAC8J,EAAY,SAIrB,C","sources":["webpack://react-homework-template/./src/components/Board/AddBtnColumn/AddBtnColumn.module.css?57c6","webpack://react-homework-template/./src/components/Forms/BoardForms/AddColumnForm/AddColumnForm.module.css?8bcc","redux/boards/selectors.js","components/Forms/BoardForms/AddColumnForm/AddColumnForm.jsx","components/Board/AddBtnColumn/AddBtnColumn.jsx","webpack://react-homework-template/./src/components/Forms/BoardForms/CardForm/CardForm.module.css?1a90","webpack://react-homework-template/./src/components/PriorityOptions/PriorityOptions.module.css?75cd","components/PriorityOptions/PriorityOptions.jsx","webpack://react-homework-template/./src/components/Calendar/Calendar.module.css?a426","components/Calendar/Calendar.jsx","components/Forms/BoardForms/CardForm/CardForm.jsx","webpack://react-homework-template/./src/components/ColumnsList/ColumnsList.module.css?4558","redux/filter/selectors.js","redux/tasks/selectors.js","webpack://react-homework-template/./src/components/CardList/Card/Card.module.css?9f53","webpack://react-homework-template/./src/components/CardList/Progress/Progress.module.css?3286","components/CardList/Progress/Progress.jsx","components/CardList/Card/Card.jsx","components/CardList/CradList.jsx","redux/columns/selectors.js","components/ColumnsList/ColumnsList.jsx","webpack://react-homework-template/./src/components/ScreensPage/Screens.page.module.css?c90b","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Board/HeaderDashboard/HeaderDashboard.module.css?275b","components/Board/HeaderDashboard/HeaderDashboard.jsx","components/ScreensPage/Screens.page.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btnAddColumn\":\"AddBtnColumn_btnAddColumn__PKhFZ\",\"btnPlus\":\"AddBtnColumn_btnPlus__wZkNB\"};","// extracted by mini-css-extract-plugin\nexport default {\"addColumnModalTitle\":\"AddColumnForm_addColumnModalTitle__whRgL\",\"addColumnForm\":\"AddColumnForm_addColumnForm__PHu-J\",\"addColumnInput\":\"AddColumnForm_addColumnInput__6QVuw\"};","export const selectBoards = state => state.boards.boardList;\nexport const selectBoard = state => state.boards.board; \n","\nimport { useSelector } from \"react-redux\";\nimport MainAddButton from 'components/Buttons/MainAddButton/MainAddButton';\nimport css from './AddColumnForm.module.css';\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { addColumn } from '../../../../redux/columns/operation';\nimport { selectBoard } from '../../../../redux/boards/selectors';\n\nconst addColumnSchema = Yup.object().shape({\n    columnTitle: Yup.string()\n        .required(\"Please enter the title\"),           \n});\n\nconst AddColumnForm = () => {\n  const board = useSelector(selectBoard); \n  const dispatch = useDispatch();\n  \n  const handleSubmit = (values, actions) => {\n    dispatch(addColumn({\n      title: values.columnTitle,\n      board: board._id,\n    }));  \n    actions.resetForm(); \n  }\n\n  return (\n    <Formik validationSchema={addColumnSchema}\n      initialValues={{ columnTitle: \"\" }}\n      onSubmit={handleSubmit}>\n      <Form>\n        <h3 className={css.addColumnModalTitle}>Add column</h3>\n        <Field className={css.addColumnInput}\n          as=\"input\"\n          type=\"text\"\n          name=\"columnTitle\"\n          placeholder=\"Title\"\n          required={true}\n          autoFocus \n        />\n        <MainAddButton text=\"Add\"/>\n      </Form>     \n    </Formik>\n  );\n};\n\nexport default AddColumnForm;\n","import { useState } from 'react';\nimport sprite from 'assets/images/sprite.svg';\nimport css from './AddBtnColumn.module.css';\nimport Modal from 'components/Modal/Modal';\nimport AddColumnForm from '../../Forms/BoardForms/AddColumnForm/AddColumnForm';\n\nconst AddBtnColumn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <>\n      <button className={css.btnAddColumn} type=\"button\" onClick={toggleModal}>\n        <div className={css.btnPlus}>\n          <svg aria-label=\"plus\">\n            <use href={`${sprite}#plus-20`}></use>\n          </svg>\n        </div>\n        <p className={css.btnText}>Add another column</p>\n      </button>\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n          <AddColumnForm />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default AddBtnColumn;\n","// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"CardForm_formTitle__UxmMR\",\"formText\":\"CardForm_formText__Lrywy\",\"inputForm\":\"CardForm_inputForm__Pjbp4\",\"errorField\":\"CardForm_errorField__u4Pnb\",\"label\":\"CardForm_label__yLVGx\",\"description\":\"CardForm_description__JlASz CardForm_inputForm__Pjbp4\",\"priorityWrapper\":\"CardForm_priorityWrapper__AUS8j\",\"deadlineWrapper\":\"CardForm_deadlineWrapper__9e5ip\"};","// extracted by mini-css-extract-plugin\nexport default {\"labelWrapper\":\"PriorityOptions_labelWrapper__Byxtu\",\"label\":\"PriorityOptions_label__MK2FN\"};","import { Field } from 'formik';\nimport css from \"./PriorityOptions.module.css\"\n    \nconst PriorityOptions = ({options, priority, active }) => {\n    return (\n        <ul className={css.labelWrapper}>                        \n            {options.map(({ value, color }) => (                          \n                <li key={value} >\n                    <Field\n                        as=\"input\"\n                        type=\"radio\"\n                        name=\"priority\"\n                        value={value}\n                        checked = {priority === value}\n                        className={css.label}\n                        style={{ backgroundColor: color }}\n                        onClick={active}\n                    />\n                </li>                 \n            ))}                   \n        </ul>            \n    )\n    \n}\nexport default PriorityOptions","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Calendar_button__9bAG0\"};","import DatePicker  from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport css from \"./Calendar.module.css\"\nimport { forwardRef } from \"react\";\nimport sprite from \"../../assets/images/sprite.svg\";\nimport en from \"date-fns/locale/en-GB\";\n\n\nconst Calendar = ({ date, changeDate }) => {\n  \n    const getDateFormat = (date) => {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    if (\n      date.getDate() === today.getDate() &&\n      date.getMonth() === today.getMonth() &&\n      date.getFullYear() === today.getFullYear()\n    ) {\n      return \"'Today', MMMM dd\";\n    } else if (\n      date.getDate() === tomorrow.getDate() &&\n      date.getMonth() === tomorrow.getMonth() &&\n      date.getFullYear() === tomorrow.getFullYear()\n    ) {\n      return \"'Tomorrow', MMMM dd\";\n    } else {\n      return \"EEEE, MMMM dd\";\n    }\n  };\n    \n  const CustomInput = forwardRef(({ value, onClick }, ref) => (\n    <button type=\"button\" className={css.button} onClick={onClick} ref={ref}>\n      {value}\n      <svg>\n        <use href={`${sprite}#select-menu-16`} />\n      </svg>\n    </button>\n  ));\n \n  return (\n    <DatePicker className={css.picker}\n      locale={en}                \n      selected={date}\n      onChange={changeDate}\n      minDate={new Date()}\n      dateFormat={getDateFormat(date)}\n      onFocus={(event) => event.target.blur()}\n      onKeyDown={(event) => event.preventDefault()}\n      customInput={<CustomInput />}       \n    />\n  )\n}\n\nexport default Calendar;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport css from \"./CardForm.module.css\"; \nimport PriorityOptions from '../../../PriorityOptions/PriorityOptions';\nimport Calendar from '../../../Calendar/Calendar';\nimport MainAddButton from '../../../Buttons/MainAddButton/MainAddButton';\n\nimport { useDispatch } from \"react-redux\";\n// import { selectTasks } from '../../../../redux/tasks/selectors';\nimport { addTask, editTask } from '../../../../redux/tasks/operation';\n\nconst addCardSchema = Yup.object().shape({\n    cardTitle: Yup.string()\n        .required(\"Please enter the title\")\n        .max(25, \"Must be no more than 25 characters long\"),\n    description: Yup.string(),\n});\n\n\nconst CardForm = ({ title, action, taskTitle, taskDescription, taskPriority, taskDeadline, taskId, columnId }) => {\n    const initialValues = {\n        cardTitle: \"\",\n        description: \"\", \n    }\n\n    const [priority, setPriority] = useState(taskPriority || \"Without\");\n    const [deadline, setDeadline] = useState(taskDeadline ? new Date(taskDeadline) : new Date());\n\n      if (taskId) {\n        initialValues.cardTitle = taskTitle;\n        initialValues.description = taskDescription; \n    }\n    const priorityChange = (event) => {\n        setPriority(event.target.value);\n    }\n\n    const dispatch = useDispatch();\n    \n    const handleSubmit = (values, actions) => {\n        const newCard = {\n            _id: taskId,\n            column: columnId,\n            title: values.cardTitle,\n            description: values.description,\n            priority: priority,\n            deadline: deadline.toISOString(),\n        }\n        console.log(\"handleSubmit:newCard\", newCard)\n        if (taskId) {\n            dispatch(editTask(newCard))\n        } else {\n          dispatch(addTask(newCard));  \n        }\n        actions.resetForm();         \n    }\n\n    const priorityOptions = [\n        { value: 'Low', color: `var(--priority-low-color)`},\n        { value: 'Medium', color: `var(--priority-medium-color)`},\n        { value: 'High', color: `var(--priority-high-color)` },\n        { value: 'Without', color: `var(--priority-color-without)`},\n    ];\n\n    return (\n        <Formik validationSchema={addCardSchema}\n            initialValues={initialValues}\n            onSubmit={handleSubmit}>\n            <Form autoComplete=\"off\">\n                <h4 className={css.formTitle}>{title}</h4>\n                <label className={css.label} htmlFor=\"cardTitle\">\n                    <Field className={css.inputForm}\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"cardTitle\"\n                        placeholder=\"Title\"\n                        required={true}\n                        autoFocus                       \n                    />\n                    <span className={css.errorField}>\n                        <ErrorMessage name=\"cardTitle\" />\n                    </span>                    \n                </label>\n                <label htmlFor=\"description\">\n                    <Field className={css.description}\n                        as=\"textarea\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"Description\"\n                        required={true}                        \n                    />\n                </label>           \n                <div className={css.priorityWrapper}>\n                    <p className={css.formText}>Label color</p>\n                    <PriorityOptions\n                        options={priorityOptions}\n                        priority={priority}\n                        active={priorityChange}\n                    />  \n                </div>\n                <div className={css.deadlineWrapper}>\n                    <p className={css.formText}>Deadline</p>\n                    <Calendar date={deadline} changeDate={setDeadline} />\n                </div>\n                <MainAddButton text={action}/>\n            </Form>\n        </Formik>\n    )\n}\n\nexport default CardForm; ","// extracted by mini-css-extract-plugin\nexport default {\"columnsListContainer\":\"ColumnsList_columnsListContainer__y1n-3\",\"columnList\":\"ColumnsList_columnList__Oh-td\",\"columnItem\":\"ColumnsList_columnItem__fGEt7\",\"columnTitle\":\"ColumnsList_columnTitle__JgLbv\",\"btnIcon\":\"ColumnsList_btnIcon__dIt+m\",\"columnTitleIcon\":\"ColumnsList_columnTitleIcon__cKKEZ\"};","export const selectFilter = state => state.filter.priority; ","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"../filter/selectors\";\n\nexport const selectTasks = state => state.tasks.tasksList;\nexport const selectIsLoadingAdd = state => state.tasks.isLoadingAdd; \nexport const selectError = state => state.tasks.error; \nexport const selectDeletetaskId = state => state.tasks.deletetaskId;\nexport const selectVisibleTasks = createSelector([selectTasks, selectFilter], (tasks, filter) => {\n    const findTask = tasks.filter(task => task.priority.includes(filter));\n    return findTask;\n})","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9i1e0\",\"cardTitle\":\"Card_cardTitle__WOpNK\",\"cardDescription\":\"Card_cardDescription__asnRe\",\"cardOptions\":\"Card_cardOptions__Jpn8u\",\"optionsInfo\":\"Card_optionsInfo__Ur7lv\",\"optonWrapper\":\"Card_optonWrapper__paaQk\",\"optionTitle\":\"Card_optionTitle__Xwwk2\",\"priorityMark\":\"Card_priorityMark__P5D5u\",\"priorityLabel\":\"Card_priorityLabel__UV0uv\",\"optionsBtnList\":\"Card_optionsBtnList__MCRS8\",\"optionBtn\":\"Card_optionBtn__O+R+M\",\"deadlineNotify\":\"Card_deadlineNotify__l71UH\",\"btnItem\":\"Card_btnItem__tGlpJ\",\"optionBtnSvg\":\"Card_optionBtnSvg__gpnjf\",\"bell\":\"Card_bell__9Ck4Y\",\"progressContainer\":\"Card_progressContainer__MLD9P\"};","// extracted by mini-css-extract-plugin\nexport default {\"popupMenu\":\"Progress_popupMenu__BWCqT\",\"progressList\":\"Progress_progressList__kvm4P\",\"progressListBtn\":\"Progress_progressListBtn__Hv5GC\",\"progressBtnSvg\":\"Progress_progressBtnSvg__15GWP\"};","import React from 'react';\nimport css from './Progress.module.css';\nimport sprite from 'assets/images/sprite.svg';\nimport { useEffect } from \"react\"; \n\nconst Progress = ({closeMenu}) => {\n\n  const columnList = [\n    { id: \"27397520852ogegldknvdvdnlk\", title: \"To to\" },\n    { id: \"327530janalal\", title: \"Done\" },\n    {id: \"gjfjfkfelkfelkfwekwfelk1\", title: \"Cuttent\"}\n  ]\n\n  useEffect(() => {\n    const onEscClick = (event) => {\n      if (event.code === \"Escape\") {\n        closeMenu();\n      }\n    }\n\n    window.addEventListener(\"keydown\", onEscClick);\n    return () => {\n      window.removeEventListener('keydown', onEscClick);\n    };  \n  }, [closeMenu]);\n  \n  return (\n    <div className={css.popupMenu}>\n      <ul className={css.progressList}>\n        {columnList.map(column => <li key={column.title}>\n          <button className={css.progressListBtn}>\n            {column.title}\n            <svg className={css.progressBtnSvg}>\n                <use href={`${sprite}#remove-16`}></use>\n            </svg>            \n          </button>\n        </li>)}         \n      </ul>\n    </div>\n  )\n};\n\nexport default Progress;\n","import css from './Card.module.css';\nimport sprite from '../../../assets/images/sprite.svg';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport Modal from 'components/Modal/Modal';\nimport CardForm from 'components/Forms/BoardForms/CardForm/CardForm';\nimport Progress from '../Progress/Progress';\n// import { selectDeletetaskId } from \"../../../redux/tasks/selectors\";\nimport { deleteTask } from '../../../redux/tasks/operation';\n\nconst Card = ({ newCard }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n\n  const toggleModal = () => setShowModal(prevShowModal => !prevShowModal);\n  const toggleMenu = () => setShowMenu(prevShowMenu => !prevShowMenu);\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setShowMenu(false);\n    };\n    window.addEventListener('mousedown', handleClickOutside)\n  }, []);\n\n  const dispatch = useDispatch();\n  const onDeleteTask = () => {\n    dispatch(deleteTask(newCard._id));           \n  }\n  \n  const deadline = newCard.deadline.replace(/T.*/, '').split('-').reverse().join('/'); \n  const priority = newCard.priority;\n  let color;\n  switch (priority) {\n    case 'Low':\n      color = 'var(--priority-low-color)';\n      break;\n    case 'Medium':\n      color = 'var(--priority-medium-color)';\n      break;\n    case 'High':\n      color = 'var(--priority-high-color)';\n      break;\n    case \"Without\":\n      color = 'var(--priority-color-without)';\n      break;\n    default:\n      color = `var(--priority-color-without)`;\n  }\n    \n  return (\n    <>\n    <div className={css.card} style={{ borderLeft: `4px solid ${color}` }}>\n        <h4 className={css.cardTitle}>{newCard.title}</h4>\n        <p className={css.cardDescription}>{newCard.description}</p>\n        <div className={css.cardOptions}>\n          <div className={css.optionsInfo}>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Priority</h5>\n              <div className={css.priorityLabel}>\n                <span\n                  className={css.priorityMark}\n                  style={{ backgroundColor: color }}\n                ></span>\n                <p>{newCard.priority}</p>\n              </div>\n            </div>\n            <div className={css.optionWrapper}>\n              <h5 className={css.optionTitle}>Deadline</h5>\n              <p>{deadline}</p>\n            </div>\n          </div>\n          <ul className={css.optionsBtnList}>\n            <li className={css.deadlineNotify}>\n              <button className={css.optionBtn} type=\"button\">\n                <svg className={css.bell}>\n                  <use href={`${sprite}#bell-16`}></use>\n                </svg>\n              </button>\n            </li>\n            <li>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleMenu}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#remove-16`}></use>\n                </svg>\n              </button>\n              <div className={css.progressContainer}>\n                {showMenu && (\n                  <Progress closeMenu = {toggleMenu}/>\n                )}\n              </div>\n            </li>\n            <li className={css.btnItem}>\n              <button\n                className={css.optionBtn}\n                type=\"button\"\n                onClick={toggleModal}\n              >\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#pencil-16`}></use>\n                </svg>\n              </button>\n            </li>\n            <li>\n              <button className={css.optionBtn} onClick={onDeleteTask} type=\"button\">\n                <svg className={css.optionBtnSvg}>\n                  <use href={`${sprite}#trash-16`}></use>\n                </svg>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {showModal && (\n        <Modal closeModal={toggleModal}>\n          <CardForm title=\"Edit card\" action=\"Edit\"\n            taskTitle={newCard.title}\n            taskDescription={newCard.description}\n            taskId={newCard._id}\n            taskPriority={newCard.priority}\n            taskDeadline={newCard.deadline}\n            columnId={newCard.columnId} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Card;\n","import { useSelector } from \"react-redux\";\nimport { selectTasks, selectVisibleTasks } from \"../../redux/tasks/selectors\";\nimport Card from \"../CardList/Card/Card\";\n\nconst CardList = () => {\n    const cards = useSelector(selectTasks);\n    const visibleCards = useSelector(selectVisibleTasks);\n   \n    return (\n        <ul>\n            {cards.length > 0 && visibleCards.length === 0 ? (console.log(\"no!\")):\n           <>\n                {visibleCards.map(card =>\n                    <li key={card._id}>\n                        <Card newCard={card} />\n                    </li>\n                    )}\n            </>\n          \n            }\n        </ul>\n            \n    )\n}\n\nexport default CardList; \n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectBoard } from \"../boards/selectors\";\nexport const selecColumnList = state => state.columns.columnsList;\n\nexport const selectAllColumns = createSelector([selectBoard, selecColumnList], (board, columnsList) => {\n    if (!board.columns) {\n        return []\n    }\n\n    if (!columnsList || !columnsList.columns) {\n        return board.columns.filter(item => !!item)\n    }\n    const allColumns = columnsList.columns.concat(board.columns);\n    return allColumns.filter(item => !!item); \n})\n\n","import { useState } from 'react';\nimport MainAddButton from '../Buttons/MainAddButton/MainAddButton';\nimport Modal from '../Modal/Modal';\nimport CardForm from '../Forms/BoardForms/CardForm/CardForm';\nimport css from './ColumnsList.module.css';\nimport sprite from '../../assets/images/sprite.svg';\nimport CardList from 'components/CardList/CradList';\nimport {  useSelector } from 'react-redux';\nimport { selectAllColumns } from '../../redux/columns/selectors';\n\nconst ColumnsList = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const allColumns = useSelector(selectAllColumns); \n  \n  let columnId = \"\"\n  \n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <>\n      <div className={css.columnsListContainer}>\n        <ul className={css.columnList}>\n          {allColumns.map(column => (\n            <li key={column._id}>\n              <p className={css.columnTitle}>{column.title}\n                <button className={css.btnIcon}>\n                  <svg className={css.columnTitleIcon} width={16} height={16}>\n                    <use href={`${sprite}#pencil-16`}></use>\n                  </svg>\n              </button>\n              <button className={css.btnIcon}>\n                  <svg className={css.columnTitleIcon} width={16} height={16}>\n                    <use href={`${sprite}#trash-16`}></use>\n                  </svg>\n                </button>\n                  </p>\n                 <div>\n               <CardList/>\n              </div>\n              <MainAddButton text=\"Add another card\" click={() => {\n                columnId = column._id;\n                toggleModal();\n              }} />            \n            </li>)             \n          )          \n          }          \n        </ul>\n      </div>\n      {isOpen && (\n        <Modal closeModal={toggleModal}>\n          <CardForm title=\"Add card\" action=\"Add\" columnId={columnId} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default ColumnsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Screens_page_container__51p2p\"};","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"filterContainer\":\"Filter_filterContainer__8G57N\",\"textLeabel\":\"Filter_textLeabel__QUz2b\",\"buttonLeabel\":\"Filter_buttonLeabel__JxnC3\",\"leabelGroup\":\"Filter_leabelGroup__06GpO\",\"label\":\"Filter_label__vEd1E\",\"labeltext\":\"Filter_labeltext__wgxuo\"};","import { Formik, Form, Field } from 'formik';\nimport css from './Filter.module.css';\nimport { useState } from 'react';\nimport { selectFilter } from '../../redux/filter/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\n\nconst Filter = () => {\n  \n  const filter = useSelector(selectFilter);\n  console.log(\"filter1\",filter)\n  const dispatch = useDispatch()\n  \n    const onChange = event => {\n        dispatch(setFilter(event.currentTarget.value));\n    }\n    \n  const [priority, setPriority] = useState('');\n\n  const priorityOptions = [\n    {\n      value: 'Without',\n      color: `var(--priority-color-without)`,\n      text: 'Without priority',\n    },\n    { value: 'Low', color: `var(--priority-low-color)`, text: 'Low' },\n    { value: 'Medium', color: `var(--priority-medium-color)`, text: 'Medium' },\n    { value: 'High', color: `var(--priority-high-color)`, text: 'High' },\n  ];\n \n  const handleChange = event => {\n    setPriority(event.target.value);\n  };\n  const handleShowAll = () => {\n    setPriority(\"\");\n    dispatch(setFilter(\"\"));\n    \n  };\n\n  const initialValues = {\n    background: '00',\n    priority: '',\n  };\n  return (\n    <div>\n      <h2 className={css.filterTitle}>Filters</h2>\n      <Formik initialValues={initialValues}>\n        <Form onChange={handleChange}>\n          <div className={css.filterContainer}>\n            <div className={css.filterWrap}>\n              <p className={css.textLeabel}>Label color</p>\n              <button\n                type=\"button\"\n                onClick={handleShowAll}\n                className={css.buttonLeabel}\n              >\n                Show all\n              </button>\n            </div>\n\n            {\n              <ul>\n                {priorityOptions.map(({ value, color, text }) => (\n                  <li key={value} className={css.leabelGroup}>\n                    <Field\n                      as=\"input\"\n                      type=\"radio\"\n                      name=\"priority\"\n                      value={value}\n                      checked={priority === value}\n                      style={{ backgroundColor: color }}\n                      onClick={handleChange}\n                      onChange={ onChange }\n                      className={css.label}\n                    />{' '}\n                    <span className={css.labeltext}> {text}</span>\n                  </li>\n                ))}\n              </ul>\n            }           \n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HeaderDashboard_container__CSoUF\",\"projectTitle\":\"HeaderDashboard_projectTitle__F-IyU\",\"buttonFilter\":\"HeaderDashboard_buttonFilter__Ns8y8\",\"modalStyle\":\"HeaderDashboard_modalStyle__jVe5R\",\"filterTitle\":\"HeaderDashboard_filterTitle__trtwk\"};","import Filter from 'components/Filter/Filter';\nimport { useState } from 'react';\nimport css from './HeaderDashboard.module.css';\nimport sprite from 'assets/images/sprite.svg';\nimport Modal from 'components/Modal/Modal';\n\nconst HeaderDashboard = () => {\n  const [isOpen, setIsOpen] = useState();\n  const toggleModal = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return (\n    <div className={css.container}>\n      <h2 className={css.projectTitle}>Name of project</h2>\n      <button className={css.buttonFilter} type=\" button\" onClick={toggleModal}>\n        <svg\n          className={css.filterIcon}\n          aria-label=\"filter icon\"\n          width=\"16\"\n          height=\"16\"\n        >\n          <use href={`${sprite}#filter-16`}></use>\n        </svg>\n        <p className={css.filterTitle}>Filters</p>\n      </button>\n      {isOpen && (\n        <Modal\n          style={css.modalStyle}\n          closeModal={toggleModal}\n          children={<Filter />}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default HeaderDashboard;\n","import AddBtnColumn from 'components/Board/AddBtnColumn/AddBtnColumn';\nimport ColumnsList from '../ColumnsList/ColumnsList';\nimport css from './Screens.page.module.css';\nimport HeaderDashboard from 'components/Board/HeaderDashboard/HeaderDashboard';\n\nconst ScreensPage = () => {\n  return (\n    <>\n      <HeaderDashboard />\n      <div className={css.container}>\n        <ColumnsList />\n        <AddBtnColumn />\n      </div>\n    </>\n  );\n};\n\nexport default ScreensPage;\n"],"names":["selectBoard","state","boards","board","addColumnSchema","Yup","shape","columnTitle","required","useSelector","dispatch","useDispatch","_jsx","Formik","validationSchema","initialValues","onSubmit","values","actions","addColumn","title","_id","resetForm","children","_jsxs","Form","className","css","Field","as","type","name","placeholder","autoFocus","MainAddButton","text","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","toggleModal","_Fragment","onClick","href","concat","sprite","Modal","closeModal","AddColumnForm","_ref","options","priority","active","map","_ref2","value","color","checked","style","backgroundColor","date","changeDate","CustomInput","forwardRef","ref","DatePicker","locale","en","selected","onChange","minDate","Date","dateFormat","today","tomorrow","setDate","getDate","getMonth","getFullYear","getDateFormat","onFocus","event","target","blur","onKeyDown","preventDefault","customInput","addCardSchema","cardTitle","max","description","action","taskTitle","taskDescription","taskPriority","taskDeadline","taskId","columnId","setPriority","_useState3","_useState4","deadline","setDeadline","newCard","column","toISOString","console","log","editTask","addTask","autoComplete","htmlFor","ErrorMessage","PriorityOptions","Calendar","selectFilter","filter","selectTasks","tasks","tasksList","selectVisibleTasks","createSelector","task","includes","closeMenu","useEffect","onEscClick","code","window","addEventListener","removeEventListener","id","showModal","setShowModal","showMenu","setShowMenu","prevShowModal","toggleMenu","prevShowMenu","replace","split","reverse","join","borderLeft","Progress","deleteTask","CardForm","cards","visibleCards","length","card","Card","selectAllColumns","columns","columnsList","item","allColumns","width","height","CardList","click","setFilter","currentTarget","handleChange","background","Filter","HeaderDashboard","ColumnsList","AddBtnColumn"],"sourceRoot":""}