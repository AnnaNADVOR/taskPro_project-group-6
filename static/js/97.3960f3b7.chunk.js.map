{"version":3,"file":"static/js/97.3960f3b7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AuthNav/AuthNav.module.css?aff0","components/Forms/AuthForms/Schemas/Schemas.jsx","components/AuthNav/AuthNav.jsx","components/Forms/AuthForms/RegisterForm/RegisterForm.jsx","components/Forms/AuthForms/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/components/Logo/Logo.module.css?6a46","components/Logo/Logo.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"AuthNav_box__a79DY\",\"form\":\"AuthNav_form__Tu5W2\",\"input\":\"AuthNav_input__dreiH\",\"inputBox\":\"AuthNav_inputBox__SDbVX\",\"wrap\":\"AuthNav_wrap__kWELm\",\"icon\":\"AuthNav_icon__tXG1f\",\"links\":\"AuthNav_links__-5Mwd\",\"link\":\"AuthNav_link__1DYPd\",\"active\":\"AuthNav_active__gfkpa\",\"errorMessage\":\"AuthNav_errorMessage__wa401\",\"wrapper\":\"AuthNav_wrapper__Ok8-0\",\"button\":\"AuthNav_button__-fh2Z\"};","import * as yup from 'yup';\nconst Schema = yup.object({\n  name: yup\n    .string()\n    .trim()\n    .min(2, 'Name must be at least 2 characters')\n    .max(32, 'Name must be no more than 32 characters')\n    .matches(\n      /^[a-zA-Z0-9\\s]*$/,\n      'Name can only contain letters, numbers, and spaces'\n    ),\n  email: yup\n    .string()\n    .trim()\n    .email()\n    .required('Email is required')\n    .matches(\n      /^[a-zA-Z0-9.-_]+@[a-zA-Z]+\\.[a-zA-Z]{2,3}$/,\n      'Invalid email format'\n    ),\n  password: yup\n     .string()\n    .trim()\n    .required('Password is required')\n    .matches(\n      /^(?=.*[a-zA-Z0-9])[a-zA-Z0-9!@#$%^&*()-_=+[\\]{}|;:',.<>?/~`]+$/,\n      'Invalid password format'\n    )\n    .min(8, 'Password must be at least 8 characters')\n    .max(64, 'Password must be no more than 64 characters')\n    .test(\n      'no-spaces',\n      'Password cannot contain spaces',\n      value => !/\\s/.test(value)\n    ),\n});\n\nexport default Schema;","import { NavLink } from 'react-router-dom';\nimport style from \"./AuthNav.module.css\";\n\nconst ActiveAuthLink = () => {\n  return (\n    <div className={style.links}>\n      <NavLink\n        className={({ isActive }) =>\n        isActive ? `${style.link} ${style.active}` : style.link}\n        to={`/auth/register`}>\n        Registration\n      </NavLink>\n      <NavLink\n        className={({ isActive }) =>\n        isActive ? `${style.link} ${style.active}` : style.link}\n        to={`/auth/login`}>\n        Log In\n      </NavLink>\n    </div>\n  );\n}\n\n\nexport default ActiveAuthLink; \n","\nimport { useState } from 'react';\nimport { register } from '../../../../redux/auth/operation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport style from '../../../AuthNav/AuthNav.module.css';\nimport sprite from '../../../../assets/images/sprite.svg';\nimport Schema from '../Schemas/Schemas';\nimport ActiveAuth from 'components/AuthNav/AuthNav';\nimport { selectIsLoadingRegister } from \"../../../../redux/auth/selectors\";\n\nconst RegisterForm = () => {\nconst dispatch = useDispatch();\nconst initialValues = {\n        name: '',\n        email: '',\n        password: ''\n    };\nconst handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();}\nconst [showPassword, setShowPassword] = useState(false);\nconst handleTogglePassword = () => {\n    setShowPassword(!showPassword); };\nconst isLoading = useSelector(selectIsLoadingRegister);\n  \n  return (\n    <div className={style.box}>\n      <ActiveAuth/>\n      <Formik\n      initialValues={initialValues} validationSchema={Schema } onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n        <Form className={style.form} autoComplete=\"off\" >\n          <div className={style.inputBox}>\n            <div className={style.wrap}>\n              <ErrorMessage\n                name=\"name\"\n                render={message => (\n                  <p className={style.errorMessage}>{message}</p>\n                )}\n              />\n              <Field\n                className={style.input}\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter your name\"\n              />\n            </div>\n            <div className={style.wrap}>\n              <ErrorMessage\n                name=\"email\"\n                render={message => (\n                  <p className={style.errorMessage }>{message}</p>\n                )}\n              />\n              <Field\n                className={style.input}\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            <div className={style.wrap}>\n              <ErrorMessage\n                name=\"password\"\n                render={message => (\n                  <p className={style.errorMessage }>{message}</p>\n                )}\n              />\n              <Field\n                className={style.input}\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Confirm a password\"\n              />\n              <div className={style.wrapper}>\n                <svg\n                  width={18}\n                  height={18}\n                  className={style.icon}\n                  onClick={handleTogglePassword}\n                >\n                  <use href={`${sprite}#password-eye-18`} />\n                </svg>\n              </div>\n            </div>\n          </div>\n          <button className={style.button} type=\"submit\" disabled={isSubmitting || isLoading}>\n           {isLoading ? 'Loading...' : 'Register Now'} </button>\n          </Form>\n          )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default RegisterForm;\n","\nimport style from '../../../AuthNav/AuthNav.module.css';\nimport sprite from '../../../../assets/images/sprite.svg';\nimport Schema from '../Schemas/Schemas'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from '../../../../redux/auth/operation';\nimport { selectIsLoadingLogin } from '../../../../redux/auth/selectors';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport ActiveAuth from 'components/AuthNav/AuthNav';\n\nconst LoginForm = () => {\nconst dispatch = useDispatch();\nconst isLoading = useSelector(selectIsLoadingLogin);\nconst handleSubmit = (values, { resetForm}) => {\n        dispatch(logIn(values));\n        resetForm();\n    };\nconst initialValues = {\n  email: '',\n  password: '',\n};\nconst [showPassword, setShowPassword] = useState(false);\nconst handleTogglePassword = () => {\n      setShowPassword(!showPassword);};\n  \n  return (\n   <div className={style.box}>\n  <ActiveAuth/>\n <Formik\n       initialValues={initialValues} validationSchema={Schema} onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n <Form className={style.form}>\n    <div className={style.inputBox}>\n        <div className={style.wrap}>\n            <ErrorMessage\n                name=\"email\"\n                render={message => (\n                <p className={style.errorMessage}>{message}</p>\n                )}\n            />\n        <Field\n                className={style.input}\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n        />\n        </div>\n        <div className={style.wrap}>\n            <ErrorMessage\n                name=\"password\"\n                render={message => (\n                <p className={style.errorMessage}>{message}</p>\n                )}\n            />\n        <Field\n                className={style.input}\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Confirm a password\"\n            />\n        <div className={style.wrapper}>\n                <svg \n                  width={18}\n                  height={18}\n                  className={style.icon}\n                  onClick={handleTogglePassword}\n                >\n                  <use href={`${sprite}#password-eye-18`} />\n                </svg>\n        </div>\n        </div>\n    </div>\n          <button className={style.button} type=\"submit\" disabled={isSubmitting || isLoading}>\n         {isLoading ? 'Loading...' : 'Log In Now'}\n        </button>\n          </Form>\n          )}\n        </Formik> \n    </div>\n    );\n  }\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"logo\":\"Logo_logo__vDBPO\"};","import React from 'react';\nimport style from './Logo.module.css'\nimport { Link } from 'react-router-dom';\n\nconst Logo = () => {\n    const linkStyles = {\n    textDecoration: 'underline'\n  };\n    return (\n        <span className={style.logo}>\n                ©\n                <Link to=\"/\"  style={linkStyles}> TaskPro </Link>\n                2024\n        </span>  \n    )\n}\nexport default Logo;","import { useParams } from 'react-router-dom';\n\nimport Wrapper from \"components/Forms/AuthForms/Wrapper/Wrapper\";\nimport RegisterForm from \"components/Forms/AuthForms/RegisterForm/RegisterForm\";\nimport LoginForm from \"components/Forms/AuthForms/LoginForm/LoginForm\";\nimport Logo from 'components/Logo/Logo';\n\nconst AuthPage = () => {\n  const { id } = useParams();\n  return (\n    <Wrapper>\n      {id === 'register' ? <RegisterForm /> : <LoginForm />}\n      <Logo/>\n    </Wrapper>\n  ) \n}\n\nexport default AuthPage;\n"],"names":["yup","name","trim","min","max","matches","email","required","password","test","value","_jsxs","className","style","children","_jsx","NavLink","_ref","isActive","concat","to","_ref2","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleTogglePassword","isLoading","useSelector","selectIsLoadingRegister","ActiveAuth","Formik","initialValues","validationSchema","Schema","onSubmit","values","resetForm","register","isSubmitting","Form","autoComplete","ErrorMessage","render","message","Field","type","placeholder","width","height","onClick","href","sprite","disabled","selectIsLoadingLogin","logIn","Link","textDecoration","id","useParams","Wrapper","RegisterForm","LoginForm","Logo"],"sourceRoot":""}